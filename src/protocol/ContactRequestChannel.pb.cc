// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContactRequestChannel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ContactRequestChannel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protocol {
namespace Data {
namespace ContactRequest {

namespace {

const ::google::protobuf::Descriptor* ContactRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Response_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Limits_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ContactRequestChannel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ContactRequestChannel_2eproto() {
  protobuf_AddDesc_ContactRequestChannel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ContactRequestChannel.proto");
  GOOGLE_CHECK(file != NULL);
  ContactRequest_descriptor_ = file->message_type(0);
  static const int ContactRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRequest, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRequest, message_text_),
  };
  ContactRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContactRequest_descriptor_,
      ContactRequest::default_instance_,
      ContactRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ContactRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactRequest, _internal_metadata_),
      -1);
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      -1);
  Response_Status_descriptor_ = Response_descriptor_->enum_type(0);
  Limits_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ContactRequestChannel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContactRequest_descriptor_, &ContactRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ContactRequestChannel_2eproto() {
  delete ContactRequest::default_instance_;
  delete ContactRequest_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_ContactRequestChannel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ContactRequestChannel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Protocol::Data::Control::protobuf_AddDesc_ControlChannel_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033ContactRequestChannel.proto\022\034Protocol."
    "Data.ContactRequest\032\024ControlChannel.prot"
    "o\"8\n\016ContactRequest\022\020\n\010nickname\030\001 \001(\t\022\024\n"
    "\014message_text\030\002 \001(\t\"\226\001\n\010Response\022=\n\006stat"
    "us\030\001 \002(\0162-.Protocol.Data.ContactRequest."
    "Response.Status\"K\n\006Status\022\r\n\tUndefined\020\000"
    "\022\013\n\007Pending\020\001\022\014\n\010Accepted\020\002\022\014\n\010Rejected\020"
    "\003\022\t\n\005Error\020\004*>\n\006Limits\022\031\n\024MessageMaxChar"
    "acters\020\320\017\022\031\n\025NicknameMaxCharacters\020\036:j\n\017"
    "contact_request\022\".Protocol.Data.Control."
    "OpenChannel\030\310\001 \001(\0132,.Protocol.Data.Conta"
    "ctRequest.ContactRequest:_\n\010response\022$.P"
    "rotocol.Data.Control.ChannelResult\030\311\001 \001("
    "\0132&.Protocol.Data.ContactRequest.Respons"
    "e", 561);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ContactRequestChannel.proto", &protobuf_RegisterTypes);
  ContactRequest::default_instance_ = new ContactRequest();
  Response::default_instance_ = new Response();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Protocol::Data::Control::OpenChannel::default_instance(),
    200, 11, false, false,
    &::Protocol::Data::ContactRequest::ContactRequest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Protocol::Data::Control::ChannelResult::default_instance(),
    201, 11, false, false,
    &::Protocol::Data::ContactRequest::Response::default_instance());
  ContactRequest::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ContactRequestChannel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ContactRequestChannel_2eproto {
  StaticDescriptorInitializer_ContactRequestChannel_2eproto() {
    protobuf_AddDesc_ContactRequestChannel_2eproto();
  }
} static_descriptor_initializer_ContactRequestChannel_2eproto_;
const ::google::protobuf::EnumDescriptor* Limits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Limits_descriptor_;
}
bool Limits_IsValid(int value) {
  switch(value) {
    case 30:
    case 2000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContactRequest::kNicknameFieldNumber;
const int ContactRequest::kMessageTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContactRequest::ContactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.ContactRequest.ContactRequest)
}

void ContactRequest::InitAsDefaultInstance() {
}

ContactRequest::ContactRequest(const ContactRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.ContactRequest.ContactRequest)
}

void ContactRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactRequest::~ContactRequest() {
  // @@protoc_insertion_point(destructor:Protocol.Data.ContactRequest.ContactRequest)
  SharedDtor();
}

void ContactRequest::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ContactRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactRequest_descriptor_;
}

const ContactRequest& ContactRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRequestChannel_2eproto();
  return *default_instance_;
}

ContactRequest* ContactRequest::default_instance_ = NULL;

ContactRequest* ContactRequest::New(::google::protobuf::Arena* arena) const {
  ContactRequest* n = new ContactRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.ContactRequest.ContactRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_message_text()) {
      message_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ContactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.ContactRequest.ContactRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nickname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Protocol.Data.ContactRequest.ContactRequest.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message_text;
        break;
      }

      // optional string message_text = 2;
      case 2: {
        if (tag == 18) {
         parse_message_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_text().data(), this->message_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Protocol.Data.ContactRequest.ContactRequest.message_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.ContactRequest.ContactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.ContactRequest.ContactRequest)
  return false;
#undef DO_
}

void ContactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.ContactRequest.ContactRequest)
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocol.Data.ContactRequest.ContactRequest.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  // optional string message_text = 2;
  if (has_message_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_text().data(), this->message_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocol.Data.ContactRequest.ContactRequest.message_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.ContactRequest.ContactRequest)
}

::google::protobuf::uint8* ContactRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.ContactRequest.ContactRequest)
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocol.Data.ContactRequest.ContactRequest.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // optional string message_text = 2;
  if (has_message_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_text().data(), this->message_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocol.Data.ContactRequest.ContactRequest.message_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.ContactRequest.ContactRequest)
  return target;
}

int ContactRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.ContactRequest.ContactRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string message_text = 2;
    if (has_message_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_text());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.ContactRequest.ContactRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContactRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContactRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.ContactRequest.ContactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.ContactRequest.ContactRequest)
    MergeFrom(*source);
  }
}

void ContactRequest::MergeFrom(const ContactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.ContactRequest.ContactRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_message_text()) {
      set_has_message_text();
      message_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_text_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ContactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.ContactRequest.ContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactRequest::CopyFrom(const ContactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.ContactRequest.ContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRequest::IsInitialized() const {

  return true;
}

void ContactRequest::Swap(ContactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContactRequest::InternalSwap(ContactRequest* other) {
  nickname_.Swap(&other->nickname_);
  message_text_.Swap(&other->message_text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContactRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactRequest_descriptor_;
  metadata.reflection = ContactRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContactRequest

// optional string nickname = 1;
bool ContactRequest::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContactRequest::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void ContactRequest::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContactRequest::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& ContactRequest::nickname() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.ContactRequest.ContactRequest.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContactRequest::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.Data.ContactRequest.ContactRequest.nickname)
}
 void ContactRequest::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Data.ContactRequest.ContactRequest.nickname)
}
 void ContactRequest::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Data.ContactRequest.ContactRequest.nickname)
}
 ::std::string* ContactRequest::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:Protocol.Data.ContactRequest.ContactRequest.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContactRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:Protocol.Data.ContactRequest.ContactRequest.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContactRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.ContactRequest.ContactRequest.nickname)
}

// optional string message_text = 2;
bool ContactRequest::has_message_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContactRequest::set_has_message_text() {
  _has_bits_[0] |= 0x00000002u;
}
void ContactRequest::clear_has_message_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContactRequest::clear_message_text() {
  message_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_text();
}
 const ::std::string& ContactRequest::message_text() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.ContactRequest.ContactRequest.message_text)
  return message_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContactRequest::set_message_text(const ::std::string& value) {
  set_has_message_text();
  message_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.Data.ContactRequest.ContactRequest.message_text)
}
 void ContactRequest::set_message_text(const char* value) {
  set_has_message_text();
  message_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Data.ContactRequest.ContactRequest.message_text)
}
 void ContactRequest::set_message_text(const char* value, size_t size) {
  set_has_message_text();
  message_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Data.ContactRequest.ContactRequest.message_text)
}
 ::std::string* ContactRequest::mutable_message_text() {
  set_has_message_text();
  // @@protoc_insertion_point(field_mutable:Protocol.Data.ContactRequest.ContactRequest.message_text)
  return message_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContactRequest::release_message_text() {
  // @@protoc_insertion_point(field_release:Protocol.Data.ContactRequest.ContactRequest.message_text)
  clear_has_message_text();
  return message_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContactRequest::set_allocated_message_text(::std::string* message_text) {
  if (message_text != NULL) {
    set_has_message_text();
  } else {
    clear_has_message_text();
  }
  message_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_text);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.ContactRequest.ContactRequest.message_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Response_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_Status_descriptor_;
}
bool Response_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Response_Status Response::Undefined;
const Response_Status Response::Pending;
const Response_Status Response::Accepted;
const Response_Status Response::Rejected;
const Response_Status Response::Error;
const Response_Status Response::Status_MIN;
const Response_Status Response::Status_MAX;
const int Response::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.ContactRequest.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.ContactRequest.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:Protocol.Data.ContactRequest.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactRequestChannel_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.ContactRequest.Response)
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.ContactRequest.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Protocol.Data.ContactRequest.Response.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::Data::ContactRequest::Response_Status_IsValid(value)) {
            set_status(static_cast< ::Protocol::Data::ContactRequest::Response_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.ContactRequest.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.ContactRequest.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.ContactRequest.Response)
  // required .Protocol.Data.ContactRequest.Response.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.ContactRequest.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.ContactRequest.Response)
  // required .Protocol.Data.ContactRequest.Response.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.ContactRequest.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.ContactRequest.Response)
  int total_size = 0;

  // required .Protocol.Data.ContactRequest.Response.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.ContactRequest.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.ContactRequest.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.ContactRequest.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.ContactRequest.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.ContactRequest.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.ContactRequest.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// required .Protocol.Data.ContactRequest.Response.Status status = 1;
bool Response::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void Response::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::Protocol::Data::ContactRequest::Response_Status Response::status() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.ContactRequest.Response.status)
  return static_cast< ::Protocol::Data::ContactRequest::Response_Status >(status_);
}
 void Response::set_status(::Protocol::Data::ContactRequest::Response_Status value) {
  assert(::Protocol::Data::ContactRequest::Response_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.ContactRequest.Response.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::Protocol::Data::Control::OpenChannel,
    ::google::protobuf::internal::MessageTypeTraits< ::Protocol::Data::ContactRequest::ContactRequest >, 11, false >
  contact_request(kContactRequestFieldNumber, ::Protocol::Data::ContactRequest::ContactRequest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::Protocol::Data::Control::ChannelResult,
    ::google::protobuf::internal::MessageTypeTraits< ::Protocol::Data::ContactRequest::Response >, 11, false >
  response(kResponseFieldNumber, ::Protocol::Data::ContactRequest::Response::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace ContactRequest
}  // namespace Data
}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
