// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthHiddenService.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AuthHiddenService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protocol {
namespace Data {
namespace AuthHiddenService {

namespace {

const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proof_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proof_reflection_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AuthHiddenService_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_AuthHiddenService_2eproto() {
  protobuf_AddDesc_AuthHiddenService_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AuthHiddenService.proto");
  GOOGLE_CHECK(file != NULL);
  Packet_descriptor_ = file->message_type(0);
  static const int Packet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, proof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, result_),
  };
  Packet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Packet_descriptor_,
      Packet::default_instance_,
      Packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _has_bits_[0]),
      -1,
      -1,
      sizeof(Packet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _internal_metadata_),
      -1);
  Proof_descriptor_ = file->message_type(1);
  static const int Proof_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proof, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proof, signature_),
  };
  Proof_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Proof_descriptor_,
      Proof::default_instance_,
      Proof_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proof, _has_bits_[0]),
      -1,
      -1,
      sizeof(Proof),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proof, _internal_metadata_),
      -1);
  Result_descriptor_ = file->message_type(2);
  static const int Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, accepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, is_known_contact_),
  };
  Result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      -1,
      -1,
      sizeof(Result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AuthHiddenService_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Packet_descriptor_, &Packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Proof_descriptor_, &Proof::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Result_descriptor_, &Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AuthHiddenService_2eproto() {
  delete Packet::default_instance_;
  delete Packet_reflection_;
  delete Proof::default_instance_;
  delete Proof_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
}

void protobuf_AddDesc_AuthHiddenService_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_AuthHiddenService_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Protocol::Data::Control::protobuf_AddDesc_ControlChannel_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027AuthHiddenService.proto\022\037Protocol.Data"
    ".AuthHiddenService\032\024ControlChannel.proto"
    "\"x\n\006Packet\0225\n\005proof\030\001 \001(\0132&.Protocol.Dat"
    "a.AuthHiddenService.Proof\0227\n\006result\030\002 \001("
    "\0132\'.Protocol.Data.AuthHiddenService.Resu"
    "lt\".\n\005Proof\022\022\n\npublic_key\030\001 \001(\014\022\021\n\tsigna"
    "ture\030\002 \001(\014\"4\n\006Result\022\020\n\010accepted\030\001 \002(\010\022\030"
    "\n\020is_known_contact\030\002 \001(\010::\n\rclient_cooki"
    "e\022\".Protocol.Data.Control.OpenChannel\030\2408"
    " \001(\014:<\n\rserver_cookie\022$.Protocol.Data.Co"
    "ntrol.ChannelResult\030\2408 \001(\014", 426);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AuthHiddenService.proto", &protobuf_RegisterTypes);
  Packet::default_instance_ = new Packet();
  Proof::default_instance_ = new Proof();
  Result::default_instance_ = new Result();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::Protocol::Data::Control::OpenChannel::default_instance(),
    7200, 12, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::Protocol::Data::Control::ChannelResult::default_instance(),
    7200, 12, false, false);
  Packet::default_instance_->InitAsDefaultInstance();
  Proof::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AuthHiddenService_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AuthHiddenService_2eproto {
  StaticDescriptorInitializer_AuthHiddenService_2eproto() {
    protobuf_AddDesc_AuthHiddenService_2eproto();
  }
} static_descriptor_initializer_AuthHiddenService_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kProofFieldNumber;
const int Packet::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.AuthHiddenService.Packet)
}

void Packet::InitAsDefaultInstance() {
  proof_ = const_cast< ::Protocol::Data::AuthHiddenService::Proof*>(&::Protocol::Data::AuthHiddenService::Proof::default_instance());
  result_ = const_cast< ::Protocol::Data::AuthHiddenService::Result*>(&::Protocol::Data::AuthHiddenService::Result::default_instance());
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.AuthHiddenService.Packet)
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  proof_ = NULL;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:Protocol.Data.AuthHiddenService.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (this != default_instance_) {
    delete proof_;
    delete result_;
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuthHiddenService_2eproto();
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New(::google::protobuf::Arena* arena) const {
  Packet* n = new Packet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.AuthHiddenService.Packet)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_proof()) {
      if (proof_ != NULL) proof_->::Protocol::Data::AuthHiddenService::Proof::Clear();
    }
    if (has_result()) {
      if (result_ != NULL) result_->::Protocol::Data::AuthHiddenService::Result::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.AuthHiddenService.Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.Data.AuthHiddenService.Proof proof = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proof()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .Protocol.Data.AuthHiddenService.Result result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.AuthHiddenService.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.AuthHiddenService.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.AuthHiddenService.Packet)
  // optional .Protocol.Data.AuthHiddenService.Proof proof = 1;
  if (has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->proof_, output);
  }

  // optional .Protocol.Data.AuthHiddenService.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.AuthHiddenService.Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.AuthHiddenService.Packet)
  // optional .Protocol.Data.AuthHiddenService.Proof proof = 1;
  if (has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->proof_, false, target);
  }

  // optional .Protocol.Data.AuthHiddenService.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->result_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.AuthHiddenService.Packet)
  return target;
}

int Packet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.AuthHiddenService.Packet)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .Protocol.Data.AuthHiddenService.Proof proof = 1;
    if (has_proof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->proof_);
    }

    // optional .Protocol.Data.AuthHiddenService.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->result_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.AuthHiddenService.Packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Packet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.AuthHiddenService.Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.AuthHiddenService.Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.AuthHiddenService.Packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proof()) {
      mutable_proof()->::Protocol::Data::AuthHiddenService::Proof::MergeFrom(from.proof());
    }
    if (from.has_result()) {
      mutable_result()->::Protocol::Data::AuthHiddenService::Result::MergeFrom(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.AuthHiddenService.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.AuthHiddenService.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {

  if (has_result()) {
    if (!this->result_->IsInitialized()) return false;
  }
  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  std::swap(proof_, other->proof_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Packet

// optional .Protocol.Data.AuthHiddenService.Proof proof = 1;
bool Packet::has_proof() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Packet::set_has_proof() {
  _has_bits_[0] |= 0x00000001u;
}
void Packet::clear_has_proof() {
  _has_bits_[0] &= ~0x00000001u;
}
void Packet::clear_proof() {
  if (proof_ != NULL) proof_->::Protocol::Data::AuthHiddenService::Proof::Clear();
  clear_has_proof();
}
const ::Protocol::Data::AuthHiddenService::Proof& Packet::proof() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.AuthHiddenService.Packet.proof)
  return proof_ != NULL ? *proof_ : *default_instance_->proof_;
}
::Protocol::Data::AuthHiddenService::Proof* Packet::mutable_proof() {
  set_has_proof();
  if (proof_ == NULL) {
    proof_ = new ::Protocol::Data::AuthHiddenService::Proof;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.AuthHiddenService.Packet.proof)
  return proof_;
}
::Protocol::Data::AuthHiddenService::Proof* Packet::release_proof() {
  // @@protoc_insertion_point(field_release:Protocol.Data.AuthHiddenService.Packet.proof)
  clear_has_proof();
  ::Protocol::Data::AuthHiddenService::Proof* temp = proof_;
  proof_ = NULL;
  return temp;
}
void Packet::set_allocated_proof(::Protocol::Data::AuthHiddenService::Proof* proof) {
  delete proof_;
  proof_ = proof;
  if (proof) {
    set_has_proof();
  } else {
    clear_has_proof();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.AuthHiddenService.Packet.proof)
}

// optional .Protocol.Data.AuthHiddenService.Result result = 2;
bool Packet::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Packet::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void Packet::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void Packet::clear_result() {
  if (result_ != NULL) result_->::Protocol::Data::AuthHiddenService::Result::Clear();
  clear_has_result();
}
const ::Protocol::Data::AuthHiddenService::Result& Packet::result() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.AuthHiddenService.Packet.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
::Protocol::Data::AuthHiddenService::Result* Packet::mutable_result() {
  set_has_result();
  if (result_ == NULL) {
    result_ = new ::Protocol::Data::AuthHiddenService::Result;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.AuthHiddenService.Packet.result)
  return result_;
}
::Protocol::Data::AuthHiddenService::Result* Packet::release_result() {
  // @@protoc_insertion_point(field_release:Protocol.Data.AuthHiddenService.Packet.result)
  clear_has_result();
  ::Protocol::Data::AuthHiddenService::Result* temp = result_;
  result_ = NULL;
  return temp;
}
void Packet::set_allocated_result(::Protocol::Data::AuthHiddenService::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.AuthHiddenService.Packet.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Proof::kPublicKeyFieldNumber;
const int Proof::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Proof::Proof()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.AuthHiddenService.Proof)
}

void Proof::InitAsDefaultInstance() {
}

Proof::Proof(const Proof& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.AuthHiddenService.Proof)
}

void Proof::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proof::~Proof() {
  // @@protoc_insertion_point(destructor:Protocol.Data.AuthHiddenService.Proof)
  SharedDtor();
}

void Proof::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Proof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proof::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proof_descriptor_;
}

const Proof& Proof::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuthHiddenService_2eproto();
  return *default_instance_;
}

Proof* Proof::default_instance_ = NULL;

Proof* Proof::New(::google::protobuf::Arena* arena) const {
  Proof* n = new Proof;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Proof::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.AuthHiddenService.Proof)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_public_key()) {
      public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_signature()) {
      signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Proof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.AuthHiddenService.Proof)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // optional bytes signature = 2;
      case 2: {
        if (tag == 18) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.AuthHiddenService.Proof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.AuthHiddenService.Proof)
  return false;
#undef DO_
}

void Proof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.AuthHiddenService.Proof)
  // optional bytes public_key = 1;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_key(), output);
  }

  // optional bytes signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.AuthHiddenService.Proof)
}

::google::protobuf::uint8* Proof::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.AuthHiddenService.Proof)
  // optional bytes public_key = 1;
  if (has_public_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_key(), target);
  }

  // optional bytes signature = 2;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.AuthHiddenService.Proof)
  return target;
}

int Proof::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.AuthHiddenService.Proof)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes public_key = 1;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

    // optional bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proof::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.AuthHiddenService.Proof)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Proof* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Proof>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.AuthHiddenService.Proof)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.AuthHiddenService.Proof)
    MergeFrom(*source);
  }
}

void Proof::MergeFrom(const Proof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.AuthHiddenService.Proof)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_public_key()) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (from.has_signature()) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Proof::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.AuthHiddenService.Proof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proof::CopyFrom(const Proof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.AuthHiddenService.Proof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proof::IsInitialized() const {

  return true;
}

void Proof::Swap(Proof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Proof::InternalSwap(Proof* other) {
  public_key_.Swap(&other->public_key_);
  signature_.Swap(&other->signature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Proof::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proof_descriptor_;
  metadata.reflection = Proof_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Proof

// optional bytes public_key = 1;
bool Proof::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Proof::set_has_public_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Proof::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Proof::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
 const ::std::string& Proof::public_key() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.AuthHiddenService.Proof.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Proof::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.Data.AuthHiddenService.Proof.public_key)
}
 void Proof::set_public_key(const char* value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Data.AuthHiddenService.Proof.public_key)
}
 void Proof::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Data.AuthHiddenService.Proof.public_key)
}
 ::std::string* Proof::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:Protocol.Data.AuthHiddenService.Proof.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Proof::release_public_key() {
  // @@protoc_insertion_point(field_release:Protocol.Data.AuthHiddenService.Proof.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Proof::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.AuthHiddenService.Proof.public_key)
}

// optional bytes signature = 2;
bool Proof::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Proof::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void Proof::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void Proof::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
 const ::std::string& Proof::signature() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.AuthHiddenService.Proof.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Proof::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.Data.AuthHiddenService.Proof.signature)
}
 void Proof::set_signature(const char* value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Data.AuthHiddenService.Proof.signature)
}
 void Proof::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Data.AuthHiddenService.Proof.signature)
}
 ::std::string* Proof::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:Protocol.Data.AuthHiddenService.Proof.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Proof::release_signature() {
  // @@protoc_insertion_point(field_release:Protocol.Data.AuthHiddenService.Proof.signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Proof::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.AuthHiddenService.Proof.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kAcceptedFieldNumber;
const int Result::kIsKnownContactFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.AuthHiddenService.Result)
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.AuthHiddenService.Result)
}

void Result::SharedCtor() {
  _cached_size_ = 0;
  accepted_ = false;
  is_known_contact_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:Protocol.Data.AuthHiddenService.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuthHiddenService_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New(::google::protobuf::Arena* arena) const {
  Result* n = new Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.AuthHiddenService.Result)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Result, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Result*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(accepted_, is_known_contact_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.AuthHiddenService.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool accepted = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepted_)));
          set_has_accepted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_known_contact;
        break;
      }

      // optional bool is_known_contact = 2;
      case 2: {
        if (tag == 16) {
         parse_is_known_contact:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_known_contact_)));
          set_has_is_known_contact();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.AuthHiddenService.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.AuthHiddenService.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.AuthHiddenService.Result)
  // required bool accepted = 1;
  if (has_accepted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accepted(), output);
  }

  // optional bool is_known_contact = 2;
  if (has_is_known_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_known_contact(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.AuthHiddenService.Result)
}

::google::protobuf::uint8* Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.AuthHiddenService.Result)
  // required bool accepted = 1;
  if (has_accepted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accepted(), target);
  }

  // optional bool is_known_contact = 2;
  if (has_is_known_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_known_contact(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.AuthHiddenService.Result)
  return target;
}

int Result::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.AuthHiddenService.Result)
  int total_size = 0;

  // required bool accepted = 1;
  if (has_accepted()) {
    total_size += 1 + 1;
  }
  // optional bool is_known_contact = 2;
  if (has_is_known_contact()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.AuthHiddenService.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Result* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.AuthHiddenService.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.AuthHiddenService.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.AuthHiddenService.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accepted()) {
      set_accepted(from.accepted());
    }
    if (from.has_is_known_contact()) {
      set_is_known_contact(from.is_known_contact());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.AuthHiddenService.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.AuthHiddenService.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  std::swap(accepted_, other->accepted_);
  std::swap(is_known_contact_, other->is_known_contact_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Result

// required bool accepted = 1;
bool Result::has_accepted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Result::set_has_accepted() {
  _has_bits_[0] |= 0x00000001u;
}
void Result::clear_has_accepted() {
  _has_bits_[0] &= ~0x00000001u;
}
void Result::clear_accepted() {
  accepted_ = false;
  clear_has_accepted();
}
 bool Result::accepted() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.AuthHiddenService.Result.accepted)
  return accepted_;
}
 void Result::set_accepted(bool value) {
  set_has_accepted();
  accepted_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.AuthHiddenService.Result.accepted)
}

// optional bool is_known_contact = 2;
bool Result::has_is_known_contact() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Result::set_has_is_known_contact() {
  _has_bits_[0] |= 0x00000002u;
}
void Result::clear_has_is_known_contact() {
  _has_bits_[0] &= ~0x00000002u;
}
void Result::clear_is_known_contact() {
  is_known_contact_ = false;
  clear_has_is_known_contact();
}
 bool Result::is_known_contact() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.AuthHiddenService.Result.is_known_contact)
  return is_known_contact_;
}
 void Result::set_is_known_contact(bool value) {
  set_has_is_known_contact();
  is_known_contact_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.AuthHiddenService.Result.is_known_contact)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
const ::std::string client_cookie_default("");
::google::protobuf::internal::ExtensionIdentifier< ::Protocol::Data::Control::OpenChannel,
    ::google::protobuf::internal::StringTypeTraits, 12, false >
  client_cookie(kClientCookieFieldNumber, client_cookie_default);
const ::std::string server_cookie_default("");
::google::protobuf::internal::ExtensionIdentifier< ::Protocol::Data::Control::ChannelResult,
    ::google::protobuf::internal::StringTypeTraits, 12, false >
  server_cookie(kServerCookieFieldNumber, server_cookie_default);

// @@protoc_insertion_point(namespace_scope)

}  // namespace AuthHiddenService
}  // namespace Data
}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
