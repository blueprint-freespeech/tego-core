// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ControlChannel.proto

#ifndef PROTOBUF_ControlChannel_2eproto__INCLUDED
#define PROTOBUF_ControlChannel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Protocol {
namespace Data {
namespace Control {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ControlChannel_2eproto();
void protobuf_AssignDesc_ControlChannel_2eproto();
void protobuf_ShutdownFile_ControlChannel_2eproto();

class ChannelResult;
class EnableFeatures;
class FeaturesEnabled;
class KeepAlive;
class OpenChannel;
class Packet;

enum ChannelResult_CommonError {
  ChannelResult_CommonError_GenericError = 0,
  ChannelResult_CommonError_UnknownTypeError = 1,
  ChannelResult_CommonError_UnauthorizedError = 2,
  ChannelResult_CommonError_BadUsageError = 3,
  ChannelResult_CommonError_FailedError = 4
};
bool ChannelResult_CommonError_IsValid(int value);
const ChannelResult_CommonError ChannelResult_CommonError_CommonError_MIN = ChannelResult_CommonError_GenericError;
const ChannelResult_CommonError ChannelResult_CommonError_CommonError_MAX = ChannelResult_CommonError_FailedError;
const int ChannelResult_CommonError_CommonError_ARRAYSIZE = ChannelResult_CommonError_CommonError_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelResult_CommonError_descriptor();
inline const ::std::string& ChannelResult_CommonError_Name(ChannelResult_CommonError value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelResult_CommonError_descriptor(), value);
}
inline bool ChannelResult_CommonError_Parse(
    const ::std::string& name, ChannelResult_CommonError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelResult_CommonError>(
    ChannelResult_CommonError_descriptor(), name, value);
}
// ===================================================================

class Packet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.Data.Control.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  void Swap(Packet* other);

  // implements Message ----------------------------------------------

  inline Packet* New() const { return New(NULL); }

  Packet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Protocol.Data.Control.OpenChannel open_channel = 1;
  bool has_open_channel() const;
  void clear_open_channel();
  static const int kOpenChannelFieldNumber = 1;
  const ::Protocol::Data::Control::OpenChannel& open_channel() const;
  ::Protocol::Data::Control::OpenChannel* mutable_open_channel();
  ::Protocol::Data::Control::OpenChannel* release_open_channel();
  void set_allocated_open_channel(::Protocol::Data::Control::OpenChannel* open_channel);

  // optional .Protocol.Data.Control.ChannelResult channel_result = 2;
  bool has_channel_result() const;
  void clear_channel_result();
  static const int kChannelResultFieldNumber = 2;
  const ::Protocol::Data::Control::ChannelResult& channel_result() const;
  ::Protocol::Data::Control::ChannelResult* mutable_channel_result();
  ::Protocol::Data::Control::ChannelResult* release_channel_result();
  void set_allocated_channel_result(::Protocol::Data::Control::ChannelResult* channel_result);

  // optional .Protocol.Data.Control.KeepAlive keep_alive = 3;
  bool has_keep_alive() const;
  void clear_keep_alive();
  static const int kKeepAliveFieldNumber = 3;
  const ::Protocol::Data::Control::KeepAlive& keep_alive() const;
  ::Protocol::Data::Control::KeepAlive* mutable_keep_alive();
  ::Protocol::Data::Control::KeepAlive* release_keep_alive();
  void set_allocated_keep_alive(::Protocol::Data::Control::KeepAlive* keep_alive);

  // optional .Protocol.Data.Control.EnableFeatures enable_features = 4;
  bool has_enable_features() const;
  void clear_enable_features();
  static const int kEnableFeaturesFieldNumber = 4;
  const ::Protocol::Data::Control::EnableFeatures& enable_features() const;
  ::Protocol::Data::Control::EnableFeatures* mutable_enable_features();
  ::Protocol::Data::Control::EnableFeatures* release_enable_features();
  void set_allocated_enable_features(::Protocol::Data::Control::EnableFeatures* enable_features);

  // optional .Protocol.Data.Control.FeaturesEnabled features_enabled = 5;
  bool has_features_enabled() const;
  void clear_features_enabled();
  static const int kFeaturesEnabledFieldNumber = 5;
  const ::Protocol::Data::Control::FeaturesEnabled& features_enabled() const;
  ::Protocol::Data::Control::FeaturesEnabled* mutable_features_enabled();
  ::Protocol::Data::Control::FeaturesEnabled* release_features_enabled();
  void set_allocated_features_enabled(::Protocol::Data::Control::FeaturesEnabled* features_enabled);

  // @@protoc_insertion_point(class_scope:Protocol.Data.Control.Packet)
 private:
  inline void set_has_open_channel();
  inline void clear_has_open_channel();
  inline void set_has_channel_result();
  inline void clear_has_channel_result();
  inline void set_has_keep_alive();
  inline void clear_has_keep_alive();
  inline void set_has_enable_features();
  inline void clear_has_enable_features();
  inline void set_has_features_enabled();
  inline void clear_has_features_enabled();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Protocol::Data::Control::OpenChannel* open_channel_;
  ::Protocol::Data::Control::ChannelResult* channel_result_;
  ::Protocol::Data::Control::KeepAlive* keep_alive_;
  ::Protocol::Data::Control::EnableFeatures* enable_features_;
  ::Protocol::Data::Control::FeaturesEnabled* features_enabled_;
  friend void  protobuf_AddDesc_ControlChannel_2eproto();
  friend void protobuf_AssignDesc_ControlChannel_2eproto();
  friend void protobuf_ShutdownFile_ControlChannel_2eproto();

  void InitAsDefaultInstance();
  static Packet* default_instance_;
};
// -------------------------------------------------------------------

class OpenChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.Data.Control.OpenChannel) */ {
 public:
  OpenChannel();
  virtual ~OpenChannel();

  OpenChannel(const OpenChannel& from);

  inline OpenChannel& operator=(const OpenChannel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenChannel& default_instance();

  void Swap(OpenChannel* other);

  // implements Message ----------------------------------------------

  inline OpenChannel* New() const { return New(NULL); }

  OpenChannel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenChannel& from);
  void MergeFrom(const OpenChannel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpenChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 channel_identifier = 1;
  bool has_channel_identifier() const;
  void clear_channel_identifier();
  static const int kChannelIdentifierFieldNumber = 1;
  ::google::protobuf::int32 channel_identifier() const;
  void set_channel_identifier(::google::protobuf::int32 value);

  // required string channel_type = 2;
  bool has_channel_type() const;
  void clear_channel_type();
  static const int kChannelTypeFieldNumber = 2;
  const ::std::string& channel_type() const;
  void set_channel_type(const ::std::string& value);
  void set_channel_type(const char* value);
  void set_channel_type(const char* value, size_t size);
  ::std::string* mutable_channel_type();
  ::std::string* release_channel_type();
  void set_allocated_channel_type(::std::string* channel_type);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(OpenChannel)
  // @@protoc_insertion_point(class_scope:Protocol.Data.Control.OpenChannel)
 private:
  inline void set_has_channel_identifier();
  inline void clear_has_channel_identifier();
  inline void set_has_channel_type();
  inline void clear_has_channel_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr channel_type_;
  ::google::protobuf::int32 channel_identifier_;
  friend void  protobuf_AddDesc_ControlChannel_2eproto();
  friend void protobuf_AssignDesc_ControlChannel_2eproto();
  friend void protobuf_ShutdownFile_ControlChannel_2eproto();

  void InitAsDefaultInstance();
  static OpenChannel* default_instance_;
};
// -------------------------------------------------------------------

class ChannelResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.Data.Control.ChannelResult) */ {
 public:
  ChannelResult();
  virtual ~ChannelResult();

  ChannelResult(const ChannelResult& from);

  inline ChannelResult& operator=(const ChannelResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelResult& default_instance();

  void Swap(ChannelResult* other);

  // implements Message ----------------------------------------------

  inline ChannelResult* New() const { return New(NULL); }

  ChannelResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelResult& from);
  void MergeFrom(const ChannelResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChannelResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChannelResult_CommonError CommonError;
  static const CommonError GenericError =
    ChannelResult_CommonError_GenericError;
  static const CommonError UnknownTypeError =
    ChannelResult_CommonError_UnknownTypeError;
  static const CommonError UnauthorizedError =
    ChannelResult_CommonError_UnauthorizedError;
  static const CommonError BadUsageError =
    ChannelResult_CommonError_BadUsageError;
  static const CommonError FailedError =
    ChannelResult_CommonError_FailedError;
  static inline bool CommonError_IsValid(int value) {
    return ChannelResult_CommonError_IsValid(value);
  }
  static const CommonError CommonError_MIN =
    ChannelResult_CommonError_CommonError_MIN;
  static const CommonError CommonError_MAX =
    ChannelResult_CommonError_CommonError_MAX;
  static const int CommonError_ARRAYSIZE =
    ChannelResult_CommonError_CommonError_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommonError_descriptor() {
    return ChannelResult_CommonError_descriptor();
  }
  static inline const ::std::string& CommonError_Name(CommonError value) {
    return ChannelResult_CommonError_Name(value);
  }
  static inline bool CommonError_Parse(const ::std::string& name,
      CommonError* value) {
    return ChannelResult_CommonError_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 channel_identifier = 1;
  bool has_channel_identifier() const;
  void clear_channel_identifier();
  static const int kChannelIdentifierFieldNumber = 1;
  ::google::protobuf::int32 channel_identifier() const;
  void set_channel_identifier(::google::protobuf::int32 value);

  // required bool opened = 2;
  bool has_opened() const;
  void clear_opened();
  static const int kOpenedFieldNumber = 2;
  bool opened() const;
  void set_opened(bool value);

  // optional .Protocol.Data.Control.ChannelResult.CommonError common_error = 3;
  bool has_common_error() const;
  void clear_common_error();
  static const int kCommonErrorFieldNumber = 3;
  ::Protocol::Data::Control::ChannelResult_CommonError common_error() const;
  void set_common_error(::Protocol::Data::Control::ChannelResult_CommonError value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ChannelResult)
  // @@protoc_insertion_point(class_scope:Protocol.Data.Control.ChannelResult)
 private:
  inline void set_has_channel_identifier();
  inline void clear_has_channel_identifier();
  inline void set_has_opened();
  inline void clear_has_opened();
  inline void set_has_common_error();
  inline void clear_has_common_error();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 channel_identifier_;
  bool opened_;
  int common_error_;
  friend void  protobuf_AddDesc_ControlChannel_2eproto();
  friend void protobuf_AssignDesc_ControlChannel_2eproto();
  friend void protobuf_ShutdownFile_ControlChannel_2eproto();

  void InitAsDefaultInstance();
  static ChannelResult* default_instance_;
};
// -------------------------------------------------------------------

class KeepAlive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.Data.Control.KeepAlive) */ {
 public:
  KeepAlive();
  virtual ~KeepAlive();

  KeepAlive(const KeepAlive& from);

  inline KeepAlive& operator=(const KeepAlive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepAlive& default_instance();

  void Swap(KeepAlive* other);

  // implements Message ----------------------------------------------

  inline KeepAlive* New() const { return New(NULL); }

  KeepAlive* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepAlive& from);
  void MergeFrom(const KeepAlive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeepAlive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool response_requested = 1;
  bool has_response_requested() const;
  void clear_response_requested();
  static const int kResponseRequestedFieldNumber = 1;
  bool response_requested() const;
  void set_response_requested(bool value);

  // @@protoc_insertion_point(class_scope:Protocol.Data.Control.KeepAlive)
 private:
  inline void set_has_response_requested();
  inline void clear_has_response_requested();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool response_requested_;
  friend void  protobuf_AddDesc_ControlChannel_2eproto();
  friend void protobuf_AssignDesc_ControlChannel_2eproto();
  friend void protobuf_ShutdownFile_ControlChannel_2eproto();

  void InitAsDefaultInstance();
  static KeepAlive* default_instance_;
};
// -------------------------------------------------------------------

class EnableFeatures : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.Data.Control.EnableFeatures) */ {
 public:
  EnableFeatures();
  virtual ~EnableFeatures();

  EnableFeatures(const EnableFeatures& from);

  inline EnableFeatures& operator=(const EnableFeatures& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnableFeatures& default_instance();

  void Swap(EnableFeatures* other);

  // implements Message ----------------------------------------------

  inline EnableFeatures* New() const { return New(NULL); }

  EnableFeatures* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnableFeatures& from);
  void MergeFrom(const EnableFeatures& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableFeatures* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string feature = 1;
  int feature_size() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 1;
  const ::std::string& feature(int index) const;
  ::std::string* mutable_feature(int index);
  void set_feature(int index, const ::std::string& value);
  void set_feature(int index, const char* value);
  void set_feature(int index, const char* value, size_t size);
  ::std::string* add_feature();
  void add_feature(const ::std::string& value);
  void add_feature(const char* value);
  void add_feature(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& feature() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_feature();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(EnableFeatures)
  // @@protoc_insertion_point(class_scope:Protocol.Data.Control.EnableFeatures)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> feature_;
  friend void  protobuf_AddDesc_ControlChannel_2eproto();
  friend void protobuf_AssignDesc_ControlChannel_2eproto();
  friend void protobuf_ShutdownFile_ControlChannel_2eproto();

  void InitAsDefaultInstance();
  static EnableFeatures* default_instance_;
};
// -------------------------------------------------------------------

class FeaturesEnabled : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.Data.Control.FeaturesEnabled) */ {
 public:
  FeaturesEnabled();
  virtual ~FeaturesEnabled();

  FeaturesEnabled(const FeaturesEnabled& from);

  inline FeaturesEnabled& operator=(const FeaturesEnabled& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeaturesEnabled& default_instance();

  void Swap(FeaturesEnabled* other);

  // implements Message ----------------------------------------------

  inline FeaturesEnabled* New() const { return New(NULL); }

  FeaturesEnabled* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeaturesEnabled& from);
  void MergeFrom(const FeaturesEnabled& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeaturesEnabled* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string feature = 1;
  int feature_size() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 1;
  const ::std::string& feature(int index) const;
  ::std::string* mutable_feature(int index);
  void set_feature(int index, const ::std::string& value);
  void set_feature(int index, const char* value);
  void set_feature(int index, const char* value, size_t size);
  ::std::string* add_feature();
  void add_feature(const ::std::string& value);
  void add_feature(const char* value);
  void add_feature(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& feature() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_feature();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(FeaturesEnabled)
  // @@protoc_insertion_point(class_scope:Protocol.Data.Control.FeaturesEnabled)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> feature_;
  friend void  protobuf_AddDesc_ControlChannel_2eproto();
  friend void protobuf_AssignDesc_ControlChannel_2eproto();
  friend void protobuf_ShutdownFile_ControlChannel_2eproto();

  void InitAsDefaultInstance();
  static FeaturesEnabled* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Packet

// optional .Protocol.Data.Control.OpenChannel open_channel = 1;
inline bool Packet::has_open_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::set_has_open_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet::clear_has_open_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet::clear_open_channel() {
  if (open_channel_ != NULL) open_channel_->::Protocol::Data::Control::OpenChannel::Clear();
  clear_has_open_channel();
}
inline const ::Protocol::Data::Control::OpenChannel& Packet::open_channel() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.Packet.open_channel)
  return open_channel_ != NULL ? *open_channel_ : *default_instance_->open_channel_;
}
inline ::Protocol::Data::Control::OpenChannel* Packet::mutable_open_channel() {
  set_has_open_channel();
  if (open_channel_ == NULL) {
    open_channel_ = new ::Protocol::Data::Control::OpenChannel;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.Packet.open_channel)
  return open_channel_;
}
inline ::Protocol::Data::Control::OpenChannel* Packet::release_open_channel() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Control.Packet.open_channel)
  clear_has_open_channel();
  ::Protocol::Data::Control::OpenChannel* temp = open_channel_;
  open_channel_ = NULL;
  return temp;
}
inline void Packet::set_allocated_open_channel(::Protocol::Data::Control::OpenChannel* open_channel) {
  delete open_channel_;
  open_channel_ = open_channel;
  if (open_channel) {
    set_has_open_channel();
  } else {
    clear_has_open_channel();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Control.Packet.open_channel)
}

// optional .Protocol.Data.Control.ChannelResult channel_result = 2;
inline bool Packet::has_channel_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::set_has_channel_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet::clear_has_channel_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet::clear_channel_result() {
  if (channel_result_ != NULL) channel_result_->::Protocol::Data::Control::ChannelResult::Clear();
  clear_has_channel_result();
}
inline const ::Protocol::Data::Control::ChannelResult& Packet::channel_result() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.Packet.channel_result)
  return channel_result_ != NULL ? *channel_result_ : *default_instance_->channel_result_;
}
inline ::Protocol::Data::Control::ChannelResult* Packet::mutable_channel_result() {
  set_has_channel_result();
  if (channel_result_ == NULL) {
    channel_result_ = new ::Protocol::Data::Control::ChannelResult;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.Packet.channel_result)
  return channel_result_;
}
inline ::Protocol::Data::Control::ChannelResult* Packet::release_channel_result() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Control.Packet.channel_result)
  clear_has_channel_result();
  ::Protocol::Data::Control::ChannelResult* temp = channel_result_;
  channel_result_ = NULL;
  return temp;
}
inline void Packet::set_allocated_channel_result(::Protocol::Data::Control::ChannelResult* channel_result) {
  delete channel_result_;
  channel_result_ = channel_result;
  if (channel_result) {
    set_has_channel_result();
  } else {
    clear_has_channel_result();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Control.Packet.channel_result)
}

// optional .Protocol.Data.Control.KeepAlive keep_alive = 3;
inline bool Packet::has_keep_alive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet::set_has_keep_alive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet::clear_has_keep_alive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet::clear_keep_alive() {
  if (keep_alive_ != NULL) keep_alive_->::Protocol::Data::Control::KeepAlive::Clear();
  clear_has_keep_alive();
}
inline const ::Protocol::Data::Control::KeepAlive& Packet::keep_alive() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.Packet.keep_alive)
  return keep_alive_ != NULL ? *keep_alive_ : *default_instance_->keep_alive_;
}
inline ::Protocol::Data::Control::KeepAlive* Packet::mutable_keep_alive() {
  set_has_keep_alive();
  if (keep_alive_ == NULL) {
    keep_alive_ = new ::Protocol::Data::Control::KeepAlive;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.Packet.keep_alive)
  return keep_alive_;
}
inline ::Protocol::Data::Control::KeepAlive* Packet::release_keep_alive() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Control.Packet.keep_alive)
  clear_has_keep_alive();
  ::Protocol::Data::Control::KeepAlive* temp = keep_alive_;
  keep_alive_ = NULL;
  return temp;
}
inline void Packet::set_allocated_keep_alive(::Protocol::Data::Control::KeepAlive* keep_alive) {
  delete keep_alive_;
  keep_alive_ = keep_alive;
  if (keep_alive) {
    set_has_keep_alive();
  } else {
    clear_has_keep_alive();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Control.Packet.keep_alive)
}

// optional .Protocol.Data.Control.EnableFeatures enable_features = 4;
inline bool Packet::has_enable_features() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Packet::set_has_enable_features() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Packet::clear_has_enable_features() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Packet::clear_enable_features() {
  if (enable_features_ != NULL) enable_features_->::Protocol::Data::Control::EnableFeatures::Clear();
  clear_has_enable_features();
}
inline const ::Protocol::Data::Control::EnableFeatures& Packet::enable_features() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.Packet.enable_features)
  return enable_features_ != NULL ? *enable_features_ : *default_instance_->enable_features_;
}
inline ::Protocol::Data::Control::EnableFeatures* Packet::mutable_enable_features() {
  set_has_enable_features();
  if (enable_features_ == NULL) {
    enable_features_ = new ::Protocol::Data::Control::EnableFeatures;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.Packet.enable_features)
  return enable_features_;
}
inline ::Protocol::Data::Control::EnableFeatures* Packet::release_enable_features() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Control.Packet.enable_features)
  clear_has_enable_features();
  ::Protocol::Data::Control::EnableFeatures* temp = enable_features_;
  enable_features_ = NULL;
  return temp;
}
inline void Packet::set_allocated_enable_features(::Protocol::Data::Control::EnableFeatures* enable_features) {
  delete enable_features_;
  enable_features_ = enable_features;
  if (enable_features) {
    set_has_enable_features();
  } else {
    clear_has_enable_features();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Control.Packet.enable_features)
}

// optional .Protocol.Data.Control.FeaturesEnabled features_enabled = 5;
inline bool Packet::has_features_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Packet::set_has_features_enabled() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Packet::clear_has_features_enabled() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Packet::clear_features_enabled() {
  if (features_enabled_ != NULL) features_enabled_->::Protocol::Data::Control::FeaturesEnabled::Clear();
  clear_has_features_enabled();
}
inline const ::Protocol::Data::Control::FeaturesEnabled& Packet::features_enabled() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.Packet.features_enabled)
  return features_enabled_ != NULL ? *features_enabled_ : *default_instance_->features_enabled_;
}
inline ::Protocol::Data::Control::FeaturesEnabled* Packet::mutable_features_enabled() {
  set_has_features_enabled();
  if (features_enabled_ == NULL) {
    features_enabled_ = new ::Protocol::Data::Control::FeaturesEnabled;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.Packet.features_enabled)
  return features_enabled_;
}
inline ::Protocol::Data::Control::FeaturesEnabled* Packet::release_features_enabled() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Control.Packet.features_enabled)
  clear_has_features_enabled();
  ::Protocol::Data::Control::FeaturesEnabled* temp = features_enabled_;
  features_enabled_ = NULL;
  return temp;
}
inline void Packet::set_allocated_features_enabled(::Protocol::Data::Control::FeaturesEnabled* features_enabled) {
  delete features_enabled_;
  features_enabled_ = features_enabled;
  if (features_enabled) {
    set_has_features_enabled();
  } else {
    clear_has_features_enabled();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Control.Packet.features_enabled)
}

// -------------------------------------------------------------------

// OpenChannel

// required int32 channel_identifier = 1;
inline bool OpenChannel::has_channel_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenChannel::set_has_channel_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenChannel::clear_has_channel_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenChannel::clear_channel_identifier() {
  channel_identifier_ = 0;
  clear_has_channel_identifier();
}
inline ::google::protobuf::int32 OpenChannel::channel_identifier() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.OpenChannel.channel_identifier)
  return channel_identifier_;
}
inline void OpenChannel::set_channel_identifier(::google::protobuf::int32 value) {
  set_has_channel_identifier();
  channel_identifier_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.OpenChannel.channel_identifier)
}

// required string channel_type = 2;
inline bool OpenChannel::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenChannel::set_has_channel_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenChannel::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenChannel::clear_channel_type() {
  channel_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_type();
}
inline const ::std::string& OpenChannel::channel_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.OpenChannel.channel_type)
  return channel_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenChannel::set_channel_type(const ::std::string& value) {
  set_has_channel_type();
  channel_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.OpenChannel.channel_type)
}
inline void OpenChannel::set_channel_type(const char* value) {
  set_has_channel_type();
  channel_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Data.Control.OpenChannel.channel_type)
}
inline void OpenChannel::set_channel_type(const char* value, size_t size) {
  set_has_channel_type();
  channel_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Data.Control.OpenChannel.channel_type)
}
inline ::std::string* OpenChannel::mutable_channel_type() {
  set_has_channel_type();
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.OpenChannel.channel_type)
  return channel_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenChannel::release_channel_type() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Control.OpenChannel.channel_type)
  clear_has_channel_type();
  return channel_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenChannel::set_allocated_channel_type(::std::string* channel_type) {
  if (channel_type != NULL) {
    set_has_channel_type();
  } else {
    clear_has_channel_type();
  }
  channel_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_type);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Control.OpenChannel.channel_type)
}

// -------------------------------------------------------------------

// ChannelResult

// required int32 channel_identifier = 1;
inline bool ChannelResult::has_channel_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelResult::set_has_channel_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelResult::clear_has_channel_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelResult::clear_channel_identifier() {
  channel_identifier_ = 0;
  clear_has_channel_identifier();
}
inline ::google::protobuf::int32 ChannelResult::channel_identifier() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.ChannelResult.channel_identifier)
  return channel_identifier_;
}
inline void ChannelResult::set_channel_identifier(::google::protobuf::int32 value) {
  set_has_channel_identifier();
  channel_identifier_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.ChannelResult.channel_identifier)
}

// required bool opened = 2;
inline bool ChannelResult::has_opened() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelResult::set_has_opened() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelResult::clear_has_opened() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelResult::clear_opened() {
  opened_ = false;
  clear_has_opened();
}
inline bool ChannelResult::opened() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.ChannelResult.opened)
  return opened_;
}
inline void ChannelResult::set_opened(bool value) {
  set_has_opened();
  opened_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.ChannelResult.opened)
}

// optional .Protocol.Data.Control.ChannelResult.CommonError common_error = 3;
inline bool ChannelResult::has_common_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChannelResult::set_has_common_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChannelResult::clear_has_common_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChannelResult::clear_common_error() {
  common_error_ = 0;
  clear_has_common_error();
}
inline ::Protocol::Data::Control::ChannelResult_CommonError ChannelResult::common_error() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.ChannelResult.common_error)
  return static_cast< ::Protocol::Data::Control::ChannelResult_CommonError >(common_error_);
}
inline void ChannelResult::set_common_error(::Protocol::Data::Control::ChannelResult_CommonError value) {
  assert(::Protocol::Data::Control::ChannelResult_CommonError_IsValid(value));
  set_has_common_error();
  common_error_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.ChannelResult.common_error)
}

// -------------------------------------------------------------------

// KeepAlive

// required bool response_requested = 1;
inline bool KeepAlive::has_response_requested() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeepAlive::set_has_response_requested() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeepAlive::clear_has_response_requested() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeepAlive::clear_response_requested() {
  response_requested_ = false;
  clear_has_response_requested();
}
inline bool KeepAlive::response_requested() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.KeepAlive.response_requested)
  return response_requested_;
}
inline void KeepAlive::set_response_requested(bool value) {
  set_has_response_requested();
  response_requested_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.KeepAlive.response_requested)
}

// -------------------------------------------------------------------

// EnableFeatures

// repeated string feature = 1;
inline int EnableFeatures::feature_size() const {
  return feature_.size();
}
inline void EnableFeatures::clear_feature() {
  feature_.Clear();
}
inline const ::std::string& EnableFeatures::feature(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.EnableFeatures.feature)
  return feature_.Get(index);
}
inline ::std::string* EnableFeatures::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.EnableFeatures.feature)
  return feature_.Mutable(index);
}
inline void EnableFeatures::set_feature(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.EnableFeatures.feature)
  feature_.Mutable(index)->assign(value);
}
inline void EnableFeatures::set_feature(int index, const char* value) {
  feature_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Data.Control.EnableFeatures.feature)
}
inline void EnableFeatures::set_feature(int index, const char* value, size_t size) {
  feature_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Data.Control.EnableFeatures.feature)
}
inline ::std::string* EnableFeatures::add_feature() {
  // @@protoc_insertion_point(field_add_mutable:Protocol.Data.Control.EnableFeatures.feature)
  return feature_.Add();
}
inline void EnableFeatures::add_feature(const ::std::string& value) {
  feature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.Data.Control.EnableFeatures.feature)
}
inline void EnableFeatures::add_feature(const char* value) {
  feature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.Data.Control.EnableFeatures.feature)
}
inline void EnableFeatures::add_feature(const char* value, size_t size) {
  feature_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.Data.Control.EnableFeatures.feature)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EnableFeatures::feature() const {
  // @@protoc_insertion_point(field_list:Protocol.Data.Control.EnableFeatures.feature)
  return feature_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EnableFeatures::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Data.Control.EnableFeatures.feature)
  return &feature_;
}

// -------------------------------------------------------------------

// FeaturesEnabled

// repeated string feature = 1;
inline int FeaturesEnabled::feature_size() const {
  return feature_.size();
}
inline void FeaturesEnabled::clear_feature() {
  feature_.Clear();
}
inline const ::std::string& FeaturesEnabled::feature(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.FeaturesEnabled.feature)
  return feature_.Get(index);
}
inline ::std::string* FeaturesEnabled::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.FeaturesEnabled.feature)
  return feature_.Mutable(index);
}
inline void FeaturesEnabled::set_feature(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.FeaturesEnabled.feature)
  feature_.Mutable(index)->assign(value);
}
inline void FeaturesEnabled::set_feature(int index, const char* value) {
  feature_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Data.Control.FeaturesEnabled.feature)
}
inline void FeaturesEnabled::set_feature(int index, const char* value, size_t size) {
  feature_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Data.Control.FeaturesEnabled.feature)
}
inline ::std::string* FeaturesEnabled::add_feature() {
  // @@protoc_insertion_point(field_add_mutable:Protocol.Data.Control.FeaturesEnabled.feature)
  return feature_.Add();
}
inline void FeaturesEnabled::add_feature(const ::std::string& value) {
  feature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.Data.Control.FeaturesEnabled.feature)
}
inline void FeaturesEnabled::add_feature(const char* value) {
  feature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.Data.Control.FeaturesEnabled.feature)
}
inline void FeaturesEnabled::add_feature(const char* value, size_t size) {
  feature_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.Data.Control.FeaturesEnabled.feature)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FeaturesEnabled::feature() const {
  // @@protoc_insertion_point(field_list:Protocol.Data.Control.FeaturesEnabled.feature)
  return feature_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FeaturesEnabled::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Data.Control.FeaturesEnabled.feature)
  return &feature_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Control
}  // namespace Data
}  // namespace Protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Protocol::Data::Control::ChannelResult_CommonError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::Data::Control::ChannelResult_CommonError>() {
  return ::Protocol::Data::Control::ChannelResult_CommonError_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ControlChannel_2eproto__INCLUDED
