// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ControlChannel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ControlChannel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protocol {
namespace Data {
namespace Control {

namespace {

const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChannelResult_CommonError_descriptor_ = NULL;
const ::google::protobuf::Descriptor* KeepAlive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepAlive_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnableFeatures_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnableFeatures_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeaturesEnabled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeaturesEnabled_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ControlChannel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ControlChannel_2eproto() {
  protobuf_AddDesc_ControlChannel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ControlChannel.proto");
  GOOGLE_CHECK(file != NULL);
  Packet_descriptor_ = file->message_type(0);
  static const int Packet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, open_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, channel_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, keep_alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, enable_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, features_enabled_),
  };
  Packet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Packet_descriptor_,
      Packet::default_instance_,
      Packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _has_bits_[0]),
      -1,
      -1,
      sizeof(Packet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _internal_metadata_),
      -1);
  OpenChannel_descriptor_ = file->message_type(1);
  static const int OpenChannel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenChannel, channel_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenChannel, channel_type_),
  };
  OpenChannel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpenChannel_descriptor_,
      OpenChannel::default_instance_,
      OpenChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenChannel, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenChannel, _extensions_),
      sizeof(OpenChannel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenChannel, _internal_metadata_),
      -1);
  ChannelResult_descriptor_ = file->message_type(2);
  static const int ChannelResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelResult, channel_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelResult, opened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelResult, common_error_),
  };
  ChannelResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelResult_descriptor_,
      ChannelResult::default_instance_,
      ChannelResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelResult, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelResult, _extensions_),
      sizeof(ChannelResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelResult, _internal_metadata_),
      -1);
  ChannelResult_CommonError_descriptor_ = ChannelResult_descriptor_->enum_type(0);
  KeepAlive_descriptor_ = file->message_type(3);
  static const int KeepAlive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAlive, response_requested_),
  };
  KeepAlive_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeepAlive_descriptor_,
      KeepAlive::default_instance_,
      KeepAlive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAlive, _has_bits_[0]),
      -1,
      -1,
      sizeof(KeepAlive),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAlive, _internal_metadata_),
      -1);
  EnableFeatures_descriptor_ = file->message_type(4);
  static const int EnableFeatures_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableFeatures, feature_),
  };
  EnableFeatures_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnableFeatures_descriptor_,
      EnableFeatures::default_instance_,
      EnableFeatures_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableFeatures, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableFeatures, _extensions_),
      sizeof(EnableFeatures),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableFeatures, _internal_metadata_),
      -1);
  FeaturesEnabled_descriptor_ = file->message_type(5);
  static const int FeaturesEnabled_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesEnabled, feature_),
  };
  FeaturesEnabled_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeaturesEnabled_descriptor_,
      FeaturesEnabled::default_instance_,
      FeaturesEnabled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesEnabled, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesEnabled, _extensions_),
      sizeof(FeaturesEnabled),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesEnabled, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ControlChannel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Packet_descriptor_, &Packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpenChannel_descriptor_, &OpenChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelResult_descriptor_, &ChannelResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeepAlive_descriptor_, &KeepAlive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnableFeatures_descriptor_, &EnableFeatures::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeaturesEnabled_descriptor_, &FeaturesEnabled::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ControlChannel_2eproto() {
  delete Packet::default_instance_;
  delete Packet_reflection_;
  delete OpenChannel::default_instance_;
  delete OpenChannel_reflection_;
  delete ChannelResult::default_instance_;
  delete ChannelResult_reflection_;
  delete KeepAlive::default_instance_;
  delete KeepAlive_reflection_;
  delete EnableFeatures::default_instance_;
  delete EnableFeatures_reflection_;
  delete FeaturesEnabled::default_instance_;
  delete FeaturesEnabled_reflection_;
}

void protobuf_AddDesc_ControlChannel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ControlChannel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ControlChannel.proto\022\025Protocol.Data.Co"
    "ntrol\"\270\002\n\006Packet\0228\n\014open_channel\030\001 \001(\0132\""
    ".Protocol.Data.Control.OpenChannel\022<\n\016ch"
    "annel_result\030\002 \001(\0132$.Protocol.Data.Contr"
    "ol.ChannelResult\0224\n\nkeep_alive\030\003 \001(\0132 .P"
    "rotocol.Data.Control.KeepAlive\022>\n\017enable"
    "_features\030\004 \001(\0132%.Protocol.Data.Control."
    "EnableFeatures\022@\n\020features_enabled\030\005 \001(\013"
    "2&.Protocol.Data.Control.FeaturesEnabled"
    "\"I\n\013OpenChannel\022\032\n\022channel_identifier\030\001 "
    "\002(\005\022\024\n\014channel_type\030\002 \002(\t*\010\010d\020\200\200\200\200\002\"\377\001\n\r"
    "ChannelResult\022\032\n\022channel_identifier\030\001 \002("
    "\005\022\016\n\006opened\030\002 \002(\010\022F\n\014common_error\030\003 \001(\0162"
    "0.Protocol.Data.Control.ChannelResult.Co"
    "mmonError\"p\n\013CommonError\022\020\n\014GenericError"
    "\020\000\022\024\n\020UnknownTypeError\020\001\022\025\n\021Unauthorized"
    "Error\020\002\022\021\n\rBadUsageError\020\003\022\017\n\013FailedErro"
    "r\020\004*\010\010d\020\200\200\200\200\002\"\'\n\tKeepAlive\022\032\n\022response_r"
    "equested\030\001 \002(\010\"+\n\016EnableFeatures\022\017\n\007feat"
    "ure\030\001 \003(\t*\010\010d\020\200\200\200\200\002\",\n\017FeaturesEnabled\022\017"
    "\n\007feature\030\001 \003(\t*\010\010d\020\200\200\200\200\002", 825);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ControlChannel.proto", &protobuf_RegisterTypes);
  Packet::default_instance_ = new Packet();
  OpenChannel::default_instance_ = new OpenChannel();
  ChannelResult::default_instance_ = new ChannelResult();
  KeepAlive::default_instance_ = new KeepAlive();
  EnableFeatures::default_instance_ = new EnableFeatures();
  FeaturesEnabled::default_instance_ = new FeaturesEnabled();
  Packet::default_instance_->InitAsDefaultInstance();
  OpenChannel::default_instance_->InitAsDefaultInstance();
  ChannelResult::default_instance_->InitAsDefaultInstance();
  KeepAlive::default_instance_->InitAsDefaultInstance();
  EnableFeatures::default_instance_->InitAsDefaultInstance();
  FeaturesEnabled::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ControlChannel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ControlChannel_2eproto {
  StaticDescriptorInitializer_ControlChannel_2eproto() {
    protobuf_AddDesc_ControlChannel_2eproto();
  }
} static_descriptor_initializer_ControlChannel_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kOpenChannelFieldNumber;
const int Packet::kChannelResultFieldNumber;
const int Packet::kKeepAliveFieldNumber;
const int Packet::kEnableFeaturesFieldNumber;
const int Packet::kFeaturesEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.Control.Packet)
}

void Packet::InitAsDefaultInstance() {
  open_channel_ = const_cast< ::Protocol::Data::Control::OpenChannel*>(&::Protocol::Data::Control::OpenChannel::default_instance());
  channel_result_ = const_cast< ::Protocol::Data::Control::ChannelResult*>(&::Protocol::Data::Control::ChannelResult::default_instance());
  keep_alive_ = const_cast< ::Protocol::Data::Control::KeepAlive*>(&::Protocol::Data::Control::KeepAlive::default_instance());
  enable_features_ = const_cast< ::Protocol::Data::Control::EnableFeatures*>(&::Protocol::Data::Control::EnableFeatures::default_instance());
  features_enabled_ = const_cast< ::Protocol::Data::Control::FeaturesEnabled*>(&::Protocol::Data::Control::FeaturesEnabled::default_instance());
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.Control.Packet)
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  open_channel_ = NULL;
  channel_result_ = NULL;
  keep_alive_ = NULL;
  enable_features_ = NULL;
  features_enabled_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:Protocol.Data.Control.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (this != default_instance_) {
    delete open_channel_;
    delete channel_result_;
    delete keep_alive_;
    delete enable_features_;
    delete features_enabled_;
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ControlChannel_2eproto();
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New(::google::protobuf::Arena* arena) const {
  Packet* n = new Packet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.Control.Packet)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_open_channel()) {
      if (open_channel_ != NULL) open_channel_->::Protocol::Data::Control::OpenChannel::Clear();
    }
    if (has_channel_result()) {
      if (channel_result_ != NULL) channel_result_->::Protocol::Data::Control::ChannelResult::Clear();
    }
    if (has_keep_alive()) {
      if (keep_alive_ != NULL) keep_alive_->::Protocol::Data::Control::KeepAlive::Clear();
    }
    if (has_enable_features()) {
      if (enable_features_ != NULL) enable_features_->::Protocol::Data::Control::EnableFeatures::Clear();
    }
    if (has_features_enabled()) {
      if (features_enabled_ != NULL) features_enabled_->::Protocol::Data::Control::FeaturesEnabled::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.Control.Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.Data.Control.OpenChannel open_channel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel_result;
        break;
      }

      // optional .Protocol.Data.Control.ChannelResult channel_result = 2;
      case 2: {
        if (tag == 18) {
         parse_channel_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keep_alive;
        break;
      }

      // optional .Protocol.Data.Control.KeepAlive keep_alive = 3;
      case 3: {
        if (tag == 26) {
         parse_keep_alive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keep_alive()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_enable_features;
        break;
      }

      // optional .Protocol.Data.Control.EnableFeatures enable_features = 4;
      case 4: {
        if (tag == 34) {
         parse_enable_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enable_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_features_enabled;
        break;
      }

      // optional .Protocol.Data.Control.FeaturesEnabled features_enabled = 5;
      case 5: {
        if (tag == 42) {
         parse_features_enabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_features_enabled()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.Control.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.Control.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.Control.Packet)
  // optional .Protocol.Data.Control.OpenChannel open_channel = 1;
  if (has_open_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->open_channel_, output);
  }

  // optional .Protocol.Data.Control.ChannelResult channel_result = 2;
  if (has_channel_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->channel_result_, output);
  }

  // optional .Protocol.Data.Control.KeepAlive keep_alive = 3;
  if (has_keep_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keep_alive_, output);
  }

  // optional .Protocol.Data.Control.EnableFeatures enable_features = 4;
  if (has_enable_features()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->enable_features_, output);
  }

  // optional .Protocol.Data.Control.FeaturesEnabled features_enabled = 5;
  if (has_features_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->features_enabled_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.Control.Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.Control.Packet)
  // optional .Protocol.Data.Control.OpenChannel open_channel = 1;
  if (has_open_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->open_channel_, false, target);
  }

  // optional .Protocol.Data.Control.ChannelResult channel_result = 2;
  if (has_channel_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->channel_result_, false, target);
  }

  // optional .Protocol.Data.Control.KeepAlive keep_alive = 3;
  if (has_keep_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keep_alive_, false, target);
  }

  // optional .Protocol.Data.Control.EnableFeatures enable_features = 4;
  if (has_enable_features()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->enable_features_, false, target);
  }

  // optional .Protocol.Data.Control.FeaturesEnabled features_enabled = 5;
  if (has_features_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->features_enabled_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.Control.Packet)
  return target;
}

int Packet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.Control.Packet)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .Protocol.Data.Control.OpenChannel open_channel = 1;
    if (has_open_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->open_channel_);
    }

    // optional .Protocol.Data.Control.ChannelResult channel_result = 2;
    if (has_channel_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->channel_result_);
    }

    // optional .Protocol.Data.Control.KeepAlive keep_alive = 3;
    if (has_keep_alive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->keep_alive_);
    }

    // optional .Protocol.Data.Control.EnableFeatures enable_features = 4;
    if (has_enable_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->enable_features_);
    }

    // optional .Protocol.Data.Control.FeaturesEnabled features_enabled = 5;
    if (has_features_enabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->features_enabled_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.Control.Packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Packet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.Control.Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.Control.Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.Control.Packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_channel()) {
      mutable_open_channel()->::Protocol::Data::Control::OpenChannel::MergeFrom(from.open_channel());
    }
    if (from.has_channel_result()) {
      mutable_channel_result()->::Protocol::Data::Control::ChannelResult::MergeFrom(from.channel_result());
    }
    if (from.has_keep_alive()) {
      mutable_keep_alive()->::Protocol::Data::Control::KeepAlive::MergeFrom(from.keep_alive());
    }
    if (from.has_enable_features()) {
      mutable_enable_features()->::Protocol::Data::Control::EnableFeatures::MergeFrom(from.enable_features());
    }
    if (from.has_features_enabled()) {
      mutable_features_enabled()->::Protocol::Data::Control::FeaturesEnabled::MergeFrom(from.features_enabled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.Control.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.Control.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {

  if (has_open_channel()) {
    if (!this->open_channel_->IsInitialized()) return false;
  }
  if (has_channel_result()) {
    if (!this->channel_result_->IsInitialized()) return false;
  }
  if (has_keep_alive()) {
    if (!this->keep_alive_->IsInitialized()) return false;
  }
  if (has_enable_features()) {
    if (!this->enable_features_->IsInitialized()) return false;
  }
  if (has_features_enabled()) {
    if (!this->features_enabled_->IsInitialized()) return false;
  }
  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  std::swap(open_channel_, other->open_channel_);
  std::swap(channel_result_, other->channel_result_);
  std::swap(keep_alive_, other->keep_alive_);
  std::swap(enable_features_, other->enable_features_);
  std::swap(features_enabled_, other->features_enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Packet

// optional .Protocol.Data.Control.OpenChannel open_channel = 1;
bool Packet::has_open_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Packet::set_has_open_channel() {
  _has_bits_[0] |= 0x00000001u;
}
void Packet::clear_has_open_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
void Packet::clear_open_channel() {
  if (open_channel_ != NULL) open_channel_->::Protocol::Data::Control::OpenChannel::Clear();
  clear_has_open_channel();
}
const ::Protocol::Data::Control::OpenChannel& Packet::open_channel() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.Packet.open_channel)
  return open_channel_ != NULL ? *open_channel_ : *default_instance_->open_channel_;
}
::Protocol::Data::Control::OpenChannel* Packet::mutable_open_channel() {
  set_has_open_channel();
  if (open_channel_ == NULL) {
    open_channel_ = new ::Protocol::Data::Control::OpenChannel;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.Packet.open_channel)
  return open_channel_;
}
::Protocol::Data::Control::OpenChannel* Packet::release_open_channel() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Control.Packet.open_channel)
  clear_has_open_channel();
  ::Protocol::Data::Control::OpenChannel* temp = open_channel_;
  open_channel_ = NULL;
  return temp;
}
void Packet::set_allocated_open_channel(::Protocol::Data::Control::OpenChannel* open_channel) {
  delete open_channel_;
  open_channel_ = open_channel;
  if (open_channel) {
    set_has_open_channel();
  } else {
    clear_has_open_channel();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Control.Packet.open_channel)
}

// optional .Protocol.Data.Control.ChannelResult channel_result = 2;
bool Packet::has_channel_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Packet::set_has_channel_result() {
  _has_bits_[0] |= 0x00000002u;
}
void Packet::clear_has_channel_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void Packet::clear_channel_result() {
  if (channel_result_ != NULL) channel_result_->::Protocol::Data::Control::ChannelResult::Clear();
  clear_has_channel_result();
}
const ::Protocol::Data::Control::ChannelResult& Packet::channel_result() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.Packet.channel_result)
  return channel_result_ != NULL ? *channel_result_ : *default_instance_->channel_result_;
}
::Protocol::Data::Control::ChannelResult* Packet::mutable_channel_result() {
  set_has_channel_result();
  if (channel_result_ == NULL) {
    channel_result_ = new ::Protocol::Data::Control::ChannelResult;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.Packet.channel_result)
  return channel_result_;
}
::Protocol::Data::Control::ChannelResult* Packet::release_channel_result() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Control.Packet.channel_result)
  clear_has_channel_result();
  ::Protocol::Data::Control::ChannelResult* temp = channel_result_;
  channel_result_ = NULL;
  return temp;
}
void Packet::set_allocated_channel_result(::Protocol::Data::Control::ChannelResult* channel_result) {
  delete channel_result_;
  channel_result_ = channel_result;
  if (channel_result) {
    set_has_channel_result();
  } else {
    clear_has_channel_result();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Control.Packet.channel_result)
}

// optional .Protocol.Data.Control.KeepAlive keep_alive = 3;
bool Packet::has_keep_alive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Packet::set_has_keep_alive() {
  _has_bits_[0] |= 0x00000004u;
}
void Packet::clear_has_keep_alive() {
  _has_bits_[0] &= ~0x00000004u;
}
void Packet::clear_keep_alive() {
  if (keep_alive_ != NULL) keep_alive_->::Protocol::Data::Control::KeepAlive::Clear();
  clear_has_keep_alive();
}
const ::Protocol::Data::Control::KeepAlive& Packet::keep_alive() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.Packet.keep_alive)
  return keep_alive_ != NULL ? *keep_alive_ : *default_instance_->keep_alive_;
}
::Protocol::Data::Control::KeepAlive* Packet::mutable_keep_alive() {
  set_has_keep_alive();
  if (keep_alive_ == NULL) {
    keep_alive_ = new ::Protocol::Data::Control::KeepAlive;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.Packet.keep_alive)
  return keep_alive_;
}
::Protocol::Data::Control::KeepAlive* Packet::release_keep_alive() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Control.Packet.keep_alive)
  clear_has_keep_alive();
  ::Protocol::Data::Control::KeepAlive* temp = keep_alive_;
  keep_alive_ = NULL;
  return temp;
}
void Packet::set_allocated_keep_alive(::Protocol::Data::Control::KeepAlive* keep_alive) {
  delete keep_alive_;
  keep_alive_ = keep_alive;
  if (keep_alive) {
    set_has_keep_alive();
  } else {
    clear_has_keep_alive();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Control.Packet.keep_alive)
}

// optional .Protocol.Data.Control.EnableFeatures enable_features = 4;
bool Packet::has_enable_features() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Packet::set_has_enable_features() {
  _has_bits_[0] |= 0x00000008u;
}
void Packet::clear_has_enable_features() {
  _has_bits_[0] &= ~0x00000008u;
}
void Packet::clear_enable_features() {
  if (enable_features_ != NULL) enable_features_->::Protocol::Data::Control::EnableFeatures::Clear();
  clear_has_enable_features();
}
const ::Protocol::Data::Control::EnableFeatures& Packet::enable_features() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.Packet.enable_features)
  return enable_features_ != NULL ? *enable_features_ : *default_instance_->enable_features_;
}
::Protocol::Data::Control::EnableFeatures* Packet::mutable_enable_features() {
  set_has_enable_features();
  if (enable_features_ == NULL) {
    enable_features_ = new ::Protocol::Data::Control::EnableFeatures;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.Packet.enable_features)
  return enable_features_;
}
::Protocol::Data::Control::EnableFeatures* Packet::release_enable_features() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Control.Packet.enable_features)
  clear_has_enable_features();
  ::Protocol::Data::Control::EnableFeatures* temp = enable_features_;
  enable_features_ = NULL;
  return temp;
}
void Packet::set_allocated_enable_features(::Protocol::Data::Control::EnableFeatures* enable_features) {
  delete enable_features_;
  enable_features_ = enable_features;
  if (enable_features) {
    set_has_enable_features();
  } else {
    clear_has_enable_features();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Control.Packet.enable_features)
}

// optional .Protocol.Data.Control.FeaturesEnabled features_enabled = 5;
bool Packet::has_features_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Packet::set_has_features_enabled() {
  _has_bits_[0] |= 0x00000010u;
}
void Packet::clear_has_features_enabled() {
  _has_bits_[0] &= ~0x00000010u;
}
void Packet::clear_features_enabled() {
  if (features_enabled_ != NULL) features_enabled_->::Protocol::Data::Control::FeaturesEnabled::Clear();
  clear_has_features_enabled();
}
const ::Protocol::Data::Control::FeaturesEnabled& Packet::features_enabled() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.Packet.features_enabled)
  return features_enabled_ != NULL ? *features_enabled_ : *default_instance_->features_enabled_;
}
::Protocol::Data::Control::FeaturesEnabled* Packet::mutable_features_enabled() {
  set_has_features_enabled();
  if (features_enabled_ == NULL) {
    features_enabled_ = new ::Protocol::Data::Control::FeaturesEnabled;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.Packet.features_enabled)
  return features_enabled_;
}
::Protocol::Data::Control::FeaturesEnabled* Packet::release_features_enabled() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Control.Packet.features_enabled)
  clear_has_features_enabled();
  ::Protocol::Data::Control::FeaturesEnabled* temp = features_enabled_;
  features_enabled_ = NULL;
  return temp;
}
void Packet::set_allocated_features_enabled(::Protocol::Data::Control::FeaturesEnabled* features_enabled) {
  delete features_enabled_;
  features_enabled_ = features_enabled;
  if (features_enabled) {
    set_has_features_enabled();
  } else {
    clear_has_features_enabled();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Control.Packet.features_enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenChannel::kChannelIdentifierFieldNumber;
const int OpenChannel::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenChannel::OpenChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.Control.OpenChannel)
}

void OpenChannel::InitAsDefaultInstance() {
}

OpenChannel::OpenChannel(const OpenChannel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.Control.OpenChannel)
}

void OpenChannel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_identifier_ = 0;
  channel_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenChannel::~OpenChannel() {
  // @@protoc_insertion_point(destructor:Protocol.Data.Control.OpenChannel)
  SharedDtor();
}

void OpenChannel::SharedDtor() {
  channel_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OpenChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenChannel_descriptor_;
}

const OpenChannel& OpenChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ControlChannel_2eproto();
  return *default_instance_;
}

OpenChannel* OpenChannel::default_instance_ = NULL;

OpenChannel* OpenChannel::New(::google::protobuf::Arena* arena) const {
  OpenChannel* n = new OpenChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.Control.OpenChannel)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    channel_identifier_ = 0;
    if (has_channel_type()) {
      channel_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpenChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.Control.OpenChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 channel_identifier = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_identifier_)));
          set_has_channel_identifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel_type;
        break;
      }

      // required string channel_type = 2;
      case 2: {
        if (tag == 18) {
         parse_channel_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_type().data(), this->channel_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Protocol.Data.Control.OpenChannel.channel_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.Control.OpenChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.Control.OpenChannel)
  return false;
#undef DO_
}

void OpenChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.Control.OpenChannel)
  // required int32 channel_identifier = 1;
  if (has_channel_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel_identifier(), output);
  }

  // required string channel_type = 2;
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_type().data(), this->channel_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocol.Data.Control.OpenChannel.channel_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_type(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.Control.OpenChannel)
}

::google::protobuf::uint8* OpenChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.Control.OpenChannel)
  // required int32 channel_identifier = 1;
  if (has_channel_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel_identifier(), target);
  }

  // required string channel_type = 2;
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_type().data(), this->channel_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocol.Data.Control.OpenChannel.channel_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_type(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 536870912, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.Control.OpenChannel)
  return target;
}

int OpenChannel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Protocol.Data.Control.OpenChannel)
  int total_size = 0;

  if (has_channel_identifier()) {
    // required int32 channel_identifier = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_identifier());
  }

  if (has_channel_type()) {
    // required string channel_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_type());
  }

  return total_size;
}
int OpenChannel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.Control.OpenChannel)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 channel_identifier = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_identifier());

    // required string channel_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.Control.OpenChannel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OpenChannel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.Control.OpenChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.Control.OpenChannel)
    MergeFrom(*source);
  }
}

void OpenChannel::MergeFrom(const OpenChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.Control.OpenChannel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_identifier()) {
      set_channel_identifier(from.channel_identifier());
    }
    if (from.has_channel_type()) {
      set_has_channel_type();
      channel_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_type_);
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpenChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.Control.OpenChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenChannel::CopyFrom(const OpenChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.Control.OpenChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenChannel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void OpenChannel::Swap(OpenChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenChannel::InternalSwap(OpenChannel* other) {
  std::swap(channel_identifier_, other->channel_identifier_);
  channel_type_.Swap(&other->channel_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata OpenChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenChannel_descriptor_;
  metadata.reflection = OpenChannel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenChannel

// required int32 channel_identifier = 1;
bool OpenChannel::has_channel_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpenChannel::set_has_channel_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
void OpenChannel::clear_has_channel_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpenChannel::clear_channel_identifier() {
  channel_identifier_ = 0;
  clear_has_channel_identifier();
}
 ::google::protobuf::int32 OpenChannel::channel_identifier() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.OpenChannel.channel_identifier)
  return channel_identifier_;
}
 void OpenChannel::set_channel_identifier(::google::protobuf::int32 value) {
  set_has_channel_identifier();
  channel_identifier_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.OpenChannel.channel_identifier)
}

// required string channel_type = 2;
bool OpenChannel::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OpenChannel::set_has_channel_type() {
  _has_bits_[0] |= 0x00000002u;
}
void OpenChannel::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void OpenChannel::clear_channel_type() {
  channel_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_type();
}
 const ::std::string& OpenChannel::channel_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.OpenChannel.channel_type)
  return channel_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenChannel::set_channel_type(const ::std::string& value) {
  set_has_channel_type();
  channel_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.OpenChannel.channel_type)
}
 void OpenChannel::set_channel_type(const char* value) {
  set_has_channel_type();
  channel_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Data.Control.OpenChannel.channel_type)
}
 void OpenChannel::set_channel_type(const char* value, size_t size) {
  set_has_channel_type();
  channel_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Data.Control.OpenChannel.channel_type)
}
 ::std::string* OpenChannel::mutable_channel_type() {
  set_has_channel_type();
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.OpenChannel.channel_type)
  return channel_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenChannel::release_channel_type() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Control.OpenChannel.channel_type)
  clear_has_channel_type();
  return channel_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenChannel::set_allocated_channel_type(::std::string* channel_type) {
  if (channel_type != NULL) {
    set_has_channel_type();
  } else {
    clear_has_channel_type();
  }
  channel_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_type);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Control.OpenChannel.channel_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ChannelResult_CommonError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelResult_CommonError_descriptor_;
}
bool ChannelResult_CommonError_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChannelResult_CommonError ChannelResult::GenericError;
const ChannelResult_CommonError ChannelResult::UnknownTypeError;
const ChannelResult_CommonError ChannelResult::UnauthorizedError;
const ChannelResult_CommonError ChannelResult::BadUsageError;
const ChannelResult_CommonError ChannelResult::FailedError;
const ChannelResult_CommonError ChannelResult::CommonError_MIN;
const ChannelResult_CommonError ChannelResult::CommonError_MAX;
const int ChannelResult::CommonError_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelResult::kChannelIdentifierFieldNumber;
const int ChannelResult::kOpenedFieldNumber;
const int ChannelResult::kCommonErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelResult::ChannelResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.Control.ChannelResult)
}

void ChannelResult::InitAsDefaultInstance() {
}

ChannelResult::ChannelResult(const ChannelResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.Control.ChannelResult)
}

void ChannelResult::SharedCtor() {
  _cached_size_ = 0;
  channel_identifier_ = 0;
  opened_ = false;
  common_error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelResult::~ChannelResult() {
  // @@protoc_insertion_point(destructor:Protocol.Data.Control.ChannelResult)
  SharedDtor();
}

void ChannelResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChannelResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelResult_descriptor_;
}

const ChannelResult& ChannelResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ControlChannel_2eproto();
  return *default_instance_;
}

ChannelResult* ChannelResult::default_instance_ = NULL;

ChannelResult* ChannelResult::New(::google::protobuf::Arena* arena) const {
  ChannelResult* n = new ChannelResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelResult::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.Control.ChannelResult)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChannelResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChannelResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(channel_identifier_, common_error_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChannelResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.Control.ChannelResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 channel_identifier = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_identifier_)));
          set_has_channel_identifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_opened;
        break;
      }

      // required bool opened = 2;
      case 2: {
        if (tag == 16) {
         parse_opened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opened_)));
          set_has_opened();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_common_error;
        break;
      }

      // optional .Protocol.Data.Control.ChannelResult.CommonError common_error = 3;
      case 3: {
        if (tag == 24) {
         parse_common_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::Data::Control::ChannelResult_CommonError_IsValid(value)) {
            set_common_error(static_cast< ::Protocol::Data::Control::ChannelResult_CommonError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.Control.ChannelResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.Control.ChannelResult)
  return false;
#undef DO_
}

void ChannelResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.Control.ChannelResult)
  // required int32 channel_identifier = 1;
  if (has_channel_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel_identifier(), output);
  }

  // required bool opened = 2;
  if (has_opened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->opened(), output);
  }

  // optional .Protocol.Data.Control.ChannelResult.CommonError common_error = 3;
  if (has_common_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->common_error(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.Control.ChannelResult)
}

::google::protobuf::uint8* ChannelResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.Control.ChannelResult)
  // required int32 channel_identifier = 1;
  if (has_channel_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel_identifier(), target);
  }

  // required bool opened = 2;
  if (has_opened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->opened(), target);
  }

  // optional .Protocol.Data.Control.ChannelResult.CommonError common_error = 3;
  if (has_common_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->common_error(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 536870912, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.Control.ChannelResult)
  return target;
}

int ChannelResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Protocol.Data.Control.ChannelResult)
  int total_size = 0;

  if (has_channel_identifier()) {
    // required int32 channel_identifier = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_identifier());
  }

  if (has_opened()) {
    // required bool opened = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
int ChannelResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.Control.ChannelResult)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 channel_identifier = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_identifier());

    // required bool opened = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .Protocol.Data.Control.ChannelResult.CommonError common_error = 3;
  if (has_common_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->common_error());
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.Control.ChannelResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChannelResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.Control.ChannelResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.Control.ChannelResult)
    MergeFrom(*source);
  }
}

void ChannelResult::MergeFrom(const ChannelResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.Control.ChannelResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_identifier()) {
      set_channel_identifier(from.channel_identifier());
    }
    if (from.has_opened()) {
      set_opened(from.opened());
    }
    if (from.has_common_error()) {
      set_common_error(from.common_error());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChannelResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.Control.ChannelResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelResult::CopyFrom(const ChannelResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.Control.ChannelResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ChannelResult::Swap(ChannelResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelResult::InternalSwap(ChannelResult* other) {
  std::swap(channel_identifier_, other->channel_identifier_);
  std::swap(opened_, other->opened_);
  std::swap(common_error_, other->common_error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata ChannelResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelResult_descriptor_;
  metadata.reflection = ChannelResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelResult

// required int32 channel_identifier = 1;
bool ChannelResult::has_channel_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChannelResult::set_has_channel_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
void ChannelResult::clear_has_channel_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChannelResult::clear_channel_identifier() {
  channel_identifier_ = 0;
  clear_has_channel_identifier();
}
 ::google::protobuf::int32 ChannelResult::channel_identifier() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.ChannelResult.channel_identifier)
  return channel_identifier_;
}
 void ChannelResult::set_channel_identifier(::google::protobuf::int32 value) {
  set_has_channel_identifier();
  channel_identifier_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.ChannelResult.channel_identifier)
}

// required bool opened = 2;
bool ChannelResult::has_opened() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChannelResult::set_has_opened() {
  _has_bits_[0] |= 0x00000002u;
}
void ChannelResult::clear_has_opened() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChannelResult::clear_opened() {
  opened_ = false;
  clear_has_opened();
}
 bool ChannelResult::opened() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.ChannelResult.opened)
  return opened_;
}
 void ChannelResult::set_opened(bool value) {
  set_has_opened();
  opened_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.ChannelResult.opened)
}

// optional .Protocol.Data.Control.ChannelResult.CommonError common_error = 3;
bool ChannelResult::has_common_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChannelResult::set_has_common_error() {
  _has_bits_[0] |= 0x00000004u;
}
void ChannelResult::clear_has_common_error() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChannelResult::clear_common_error() {
  common_error_ = 0;
  clear_has_common_error();
}
 ::Protocol::Data::Control::ChannelResult_CommonError ChannelResult::common_error() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.ChannelResult.common_error)
  return static_cast< ::Protocol::Data::Control::ChannelResult_CommonError >(common_error_);
}
 void ChannelResult::set_common_error(::Protocol::Data::Control::ChannelResult_CommonError value) {
  assert(::Protocol::Data::Control::ChannelResult_CommonError_IsValid(value));
  set_has_common_error();
  common_error_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.ChannelResult.common_error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepAlive::kResponseRequestedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepAlive::KeepAlive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.Control.KeepAlive)
}

void KeepAlive::InitAsDefaultInstance() {
}

KeepAlive::KeepAlive(const KeepAlive& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.Control.KeepAlive)
}

void KeepAlive::SharedCtor() {
  _cached_size_ = 0;
  response_requested_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeepAlive::~KeepAlive() {
  // @@protoc_insertion_point(destructor:Protocol.Data.Control.KeepAlive)
  SharedDtor();
}

void KeepAlive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeepAlive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepAlive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepAlive_descriptor_;
}

const KeepAlive& KeepAlive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ControlChannel_2eproto();
  return *default_instance_;
}

KeepAlive* KeepAlive::default_instance_ = NULL;

KeepAlive* KeepAlive::New(::google::protobuf::Arena* arena) const {
  KeepAlive* n = new KeepAlive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepAlive::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.Control.KeepAlive)
  response_requested_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KeepAlive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.Control.KeepAlive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool response_requested = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &response_requested_)));
          set_has_response_requested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.Control.KeepAlive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.Control.KeepAlive)
  return false;
#undef DO_
}

void KeepAlive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.Control.KeepAlive)
  // required bool response_requested = 1;
  if (has_response_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->response_requested(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.Control.KeepAlive)
}

::google::protobuf::uint8* KeepAlive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.Control.KeepAlive)
  // required bool response_requested = 1;
  if (has_response_requested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->response_requested(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.Control.KeepAlive)
  return target;
}

int KeepAlive::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.Control.KeepAlive)
  int total_size = 0;

  // required bool response_requested = 1;
  if (has_response_requested()) {
    total_size += 1 + 1;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepAlive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.Control.KeepAlive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeepAlive* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepAlive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.Control.KeepAlive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.Control.KeepAlive)
    MergeFrom(*source);
  }
}

void KeepAlive::MergeFrom(const KeepAlive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.Control.KeepAlive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_requested()) {
      set_response_requested(from.response_requested());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KeepAlive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.Control.KeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAlive::CopyFrom(const KeepAlive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.Control.KeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAlive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeepAlive::Swap(KeepAlive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepAlive::InternalSwap(KeepAlive* other) {
  std::swap(response_requested_, other->response_requested_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepAlive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepAlive_descriptor_;
  metadata.reflection = KeepAlive_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepAlive

// required bool response_requested = 1;
bool KeepAlive::has_response_requested() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeepAlive::set_has_response_requested() {
  _has_bits_[0] |= 0x00000001u;
}
void KeepAlive::clear_has_response_requested() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeepAlive::clear_response_requested() {
  response_requested_ = false;
  clear_has_response_requested();
}
 bool KeepAlive::response_requested() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.KeepAlive.response_requested)
  return response_requested_;
}
 void KeepAlive::set_response_requested(bool value) {
  set_has_response_requested();
  response_requested_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.KeepAlive.response_requested)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnableFeatures::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableFeatures::EnableFeatures()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.Control.EnableFeatures)
}

void EnableFeatures::InitAsDefaultInstance() {
}

EnableFeatures::EnableFeatures(const EnableFeatures& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.Control.EnableFeatures)
}

void EnableFeatures::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnableFeatures::~EnableFeatures() {
  // @@protoc_insertion_point(destructor:Protocol.Data.Control.EnableFeatures)
  SharedDtor();
}

void EnableFeatures::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnableFeatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableFeatures::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnableFeatures_descriptor_;
}

const EnableFeatures& EnableFeatures::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ControlChannel_2eproto();
  return *default_instance_;
}

EnableFeatures* EnableFeatures::default_instance_ = NULL;

EnableFeatures* EnableFeatures::New(::google::protobuf::Arena* arena) const {
  EnableFeatures* n = new EnableFeatures;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnableFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.Control.EnableFeatures)
  _extensions_.Clear();
  feature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EnableFeatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.Control.EnableFeatures)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string feature = 1;
      case 1: {
        if (tag == 10) {
         parse_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_feature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feature(this->feature_size() - 1).data(),
            this->feature(this->feature_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Protocol.Data.Control.EnableFeatures.feature");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_feature;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.Control.EnableFeatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.Control.EnableFeatures)
  return false;
#undef DO_
}

void EnableFeatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.Control.EnableFeatures)
  // repeated string feature = 1;
  for (int i = 0; i < this->feature_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature(i).data(), this->feature(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocol.Data.Control.EnableFeatures.feature");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->feature(i), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.Control.EnableFeatures)
}

::google::protobuf::uint8* EnableFeatures::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.Control.EnableFeatures)
  // repeated string feature = 1;
  for (int i = 0; i < this->feature_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature(i).data(), this->feature(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocol.Data.Control.EnableFeatures.feature");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->feature(i), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 536870912, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.Control.EnableFeatures)
  return target;
}

int EnableFeatures::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.Control.EnableFeatures)
  int total_size = 0;

  // repeated string feature = 1;
  total_size += 1 * this->feature_size();
  for (int i = 0; i < this->feature_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->feature(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableFeatures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.Control.EnableFeatures)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EnableFeatures* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableFeatures>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.Control.EnableFeatures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.Control.EnableFeatures)
    MergeFrom(*source);
  }
}

void EnableFeatures::MergeFrom(const EnableFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.Control.EnableFeatures)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  feature_.MergeFrom(from.feature_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EnableFeatures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.Control.EnableFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableFeatures::CopyFrom(const EnableFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.Control.EnableFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableFeatures::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void EnableFeatures::Swap(EnableFeatures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableFeatures::InternalSwap(EnableFeatures* other) {
  feature_.UnsafeArenaSwap(&other->feature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata EnableFeatures::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnableFeatures_descriptor_;
  metadata.reflection = EnableFeatures_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnableFeatures

// repeated string feature = 1;
int EnableFeatures::feature_size() const {
  return feature_.size();
}
void EnableFeatures::clear_feature() {
  feature_.Clear();
}
 const ::std::string& EnableFeatures::feature(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.EnableFeatures.feature)
  return feature_.Get(index);
}
 ::std::string* EnableFeatures::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.EnableFeatures.feature)
  return feature_.Mutable(index);
}
 void EnableFeatures::set_feature(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.EnableFeatures.feature)
  feature_.Mutable(index)->assign(value);
}
 void EnableFeatures::set_feature(int index, const char* value) {
  feature_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Data.Control.EnableFeatures.feature)
}
 void EnableFeatures::set_feature(int index, const char* value, size_t size) {
  feature_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Data.Control.EnableFeatures.feature)
}
 ::std::string* EnableFeatures::add_feature() {
  // @@protoc_insertion_point(field_add_mutable:Protocol.Data.Control.EnableFeatures.feature)
  return feature_.Add();
}
 void EnableFeatures::add_feature(const ::std::string& value) {
  feature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.Data.Control.EnableFeatures.feature)
}
 void EnableFeatures::add_feature(const char* value) {
  feature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.Data.Control.EnableFeatures.feature)
}
 void EnableFeatures::add_feature(const char* value, size_t size) {
  feature_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.Data.Control.EnableFeatures.feature)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
EnableFeatures::feature() const {
  // @@protoc_insertion_point(field_list:Protocol.Data.Control.EnableFeatures.feature)
  return feature_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
EnableFeatures::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Data.Control.EnableFeatures.feature)
  return &feature_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeaturesEnabled::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeaturesEnabled::FeaturesEnabled()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.Control.FeaturesEnabled)
}

void FeaturesEnabled::InitAsDefaultInstance() {
}

FeaturesEnabled::FeaturesEnabled(const FeaturesEnabled& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.Control.FeaturesEnabled)
}

void FeaturesEnabled::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeaturesEnabled::~FeaturesEnabled() {
  // @@protoc_insertion_point(destructor:Protocol.Data.Control.FeaturesEnabled)
  SharedDtor();
}

void FeaturesEnabled::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeaturesEnabled::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeaturesEnabled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeaturesEnabled_descriptor_;
}

const FeaturesEnabled& FeaturesEnabled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ControlChannel_2eproto();
  return *default_instance_;
}

FeaturesEnabled* FeaturesEnabled::default_instance_ = NULL;

FeaturesEnabled* FeaturesEnabled::New(::google::protobuf::Arena* arena) const {
  FeaturesEnabled* n = new FeaturesEnabled;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeaturesEnabled::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.Control.FeaturesEnabled)
  _extensions_.Clear();
  feature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FeaturesEnabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.Control.FeaturesEnabled)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string feature = 1;
      case 1: {
        if (tag == 10) {
         parse_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_feature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feature(this->feature_size() - 1).data(),
            this->feature(this->feature_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Protocol.Data.Control.FeaturesEnabled.feature");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_feature;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.Control.FeaturesEnabled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.Control.FeaturesEnabled)
  return false;
#undef DO_
}

void FeaturesEnabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.Control.FeaturesEnabled)
  // repeated string feature = 1;
  for (int i = 0; i < this->feature_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature(i).data(), this->feature(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocol.Data.Control.FeaturesEnabled.feature");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->feature(i), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.Control.FeaturesEnabled)
}

::google::protobuf::uint8* FeaturesEnabled::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.Control.FeaturesEnabled)
  // repeated string feature = 1;
  for (int i = 0; i < this->feature_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature(i).data(), this->feature(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocol.Data.Control.FeaturesEnabled.feature");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->feature(i), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 536870912, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.Control.FeaturesEnabled)
  return target;
}

int FeaturesEnabled::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.Control.FeaturesEnabled)
  int total_size = 0;

  // repeated string feature = 1;
  total_size += 1 * this->feature_size();
  for (int i = 0; i < this->feature_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->feature(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeaturesEnabled::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.Control.FeaturesEnabled)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FeaturesEnabled* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeaturesEnabled>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.Control.FeaturesEnabled)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.Control.FeaturesEnabled)
    MergeFrom(*source);
  }
}

void FeaturesEnabled::MergeFrom(const FeaturesEnabled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.Control.FeaturesEnabled)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  feature_.MergeFrom(from.feature_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FeaturesEnabled::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.Control.FeaturesEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeaturesEnabled::CopyFrom(const FeaturesEnabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.Control.FeaturesEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturesEnabled::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void FeaturesEnabled::Swap(FeaturesEnabled* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeaturesEnabled::InternalSwap(FeaturesEnabled* other) {
  feature_.UnsafeArenaSwap(&other->feature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata FeaturesEnabled::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeaturesEnabled_descriptor_;
  metadata.reflection = FeaturesEnabled_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeaturesEnabled

// repeated string feature = 1;
int FeaturesEnabled::feature_size() const {
  return feature_.size();
}
void FeaturesEnabled::clear_feature() {
  feature_.Clear();
}
 const ::std::string& FeaturesEnabled::feature(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Control.FeaturesEnabled.feature)
  return feature_.Get(index);
}
 ::std::string* FeaturesEnabled::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Control.FeaturesEnabled.feature)
  return feature_.Mutable(index);
}
 void FeaturesEnabled::set_feature(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Protocol.Data.Control.FeaturesEnabled.feature)
  feature_.Mutable(index)->assign(value);
}
 void FeaturesEnabled::set_feature(int index, const char* value) {
  feature_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.Data.Control.FeaturesEnabled.feature)
}
 void FeaturesEnabled::set_feature(int index, const char* value, size_t size) {
  feature_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.Data.Control.FeaturesEnabled.feature)
}
 ::std::string* FeaturesEnabled::add_feature() {
  // @@protoc_insertion_point(field_add_mutable:Protocol.Data.Control.FeaturesEnabled.feature)
  return feature_.Add();
}
 void FeaturesEnabled::add_feature(const ::std::string& value) {
  feature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.Data.Control.FeaturesEnabled.feature)
}
 void FeaturesEnabled::add_feature(const char* value) {
  feature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.Data.Control.FeaturesEnabled.feature)
}
 void FeaturesEnabled::add_feature(const char* value, size_t size) {
  feature_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.Data.Control.FeaturesEnabled.feature)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
FeaturesEnabled::feature() const {
  // @@protoc_insertion_point(field_list:Protocol.Data.Control.FeaturesEnabled.feature)
  return feature_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
FeaturesEnabled::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.Data.Control.FeaturesEnabled.feature)
  return &feature_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Control
}  // namespace Data
}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
