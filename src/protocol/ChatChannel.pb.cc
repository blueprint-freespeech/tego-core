// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatChannel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChatChannel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protocol {
namespace Data {
namespace Chat {

namespace {

const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatAcknowledge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatAcknowledge_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChatChannel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ChatChannel_2eproto() {
  protobuf_AddDesc_ChatChannel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChatChannel.proto");
  GOOGLE_CHECK(file != NULL);
  Packet_descriptor_ = file->message_type(0);
  static const int Packet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, chat_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, chat_acknowledge_),
  };
  Packet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Packet_descriptor_,
      Packet::default_instance_,
      Packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _has_bits_[0]),
      -1,
      -1,
      sizeof(Packet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _internal_metadata_),
      -1);
  ChatMessage_descriptor_ = file->message_type(1);
  static const int ChatMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, message_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, time_delta_),
  };
  ChatMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChatMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _internal_metadata_),
      -1);
  ChatAcknowledge_descriptor_ = file->message_type(2);
  static const int ChatAcknowledge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAcknowledge, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAcknowledge, accepted_),
  };
  ChatAcknowledge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatAcknowledge_descriptor_,
      ChatAcknowledge::default_instance_,
      ChatAcknowledge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAcknowledge, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChatAcknowledge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatAcknowledge, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChatChannel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Packet_descriptor_, &Packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatAcknowledge_descriptor_, &ChatAcknowledge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChatChannel_2eproto() {
  delete Packet::default_instance_;
  delete Packet_reflection_;
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete ChatAcknowledge::default_instance_;
  delete ChatAcknowledge_reflection_;
}

void protobuf_AddDesc_ChatChannel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ChatChannel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ChatChannel.proto\022\022Protocol.Data.Chat\""
    "~\n\006Packet\0225\n\014chat_message\030\001 \001(\0132\037.Protoc"
    "ol.Data.Chat.ChatMessage\022=\n\020chat_acknowl"
    "edge\030\002 \001(\0132#.Protocol.Data.Chat.ChatAckn"
    "owledge\"K\n\013ChatMessage\022\024\n\014message_text\030\001"
    " \002(\t\022\022\n\nmessage_id\030\002 \001(\r\022\022\n\ntime_delta\030\003"
    " \001(\003\"=\n\017ChatAcknowledge\022\022\n\nmessage_id\030\001 "
    "\001(\r\022\026\n\010accepted\030\002 \001(\010:\004true", 307);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChatChannel.proto", &protobuf_RegisterTypes);
  Packet::default_instance_ = new Packet();
  ChatMessage::default_instance_ = new ChatMessage();
  ChatAcknowledge::default_instance_ = new ChatAcknowledge();
  Packet::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  ChatAcknowledge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChatChannel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChatChannel_2eproto {
  StaticDescriptorInitializer_ChatChannel_2eproto() {
    protobuf_AddDesc_ChatChannel_2eproto();
  }
} static_descriptor_initializer_ChatChannel_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kChatMessageFieldNumber;
const int Packet::kChatAcknowledgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.Chat.Packet)
}

void Packet::InitAsDefaultInstance() {
  chat_message_ = const_cast< ::Protocol::Data::Chat::ChatMessage*>(&::Protocol::Data::Chat::ChatMessage::default_instance());
  chat_acknowledge_ = const_cast< ::Protocol::Data::Chat::ChatAcknowledge*>(&::Protocol::Data::Chat::ChatAcknowledge::default_instance());
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.Chat.Packet)
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  chat_message_ = NULL;
  chat_acknowledge_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:Protocol.Data.Chat.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (this != default_instance_) {
    delete chat_message_;
    delete chat_acknowledge_;
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatChannel_2eproto();
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New(::google::protobuf::Arena* arena) const {
  Packet* n = new Packet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.Chat.Packet)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_chat_message()) {
      if (chat_message_ != NULL) chat_message_->::Protocol::Data::Chat::ChatMessage::Clear();
    }
    if (has_chat_acknowledge()) {
      if (chat_acknowledge_ != NULL) chat_acknowledge_->::Protocol::Data::Chat::ChatAcknowledge::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.Chat.Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Protocol.Data.Chat.ChatMessage chat_message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chat_acknowledge;
        break;
      }

      // optional .Protocol.Data.Chat.ChatAcknowledge chat_acknowledge = 2;
      case 2: {
        if (tag == 18) {
         parse_chat_acknowledge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_acknowledge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.Chat.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.Chat.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.Chat.Packet)
  // optional .Protocol.Data.Chat.ChatMessage chat_message = 1;
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->chat_message_, output);
  }

  // optional .Protocol.Data.Chat.ChatAcknowledge chat_acknowledge = 2;
  if (has_chat_acknowledge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->chat_acknowledge_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.Chat.Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.Chat.Packet)
  // optional .Protocol.Data.Chat.ChatMessage chat_message = 1;
  if (has_chat_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->chat_message_, false, target);
  }

  // optional .Protocol.Data.Chat.ChatAcknowledge chat_acknowledge = 2;
  if (has_chat_acknowledge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->chat_acknowledge_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.Chat.Packet)
  return target;
}

int Packet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.Chat.Packet)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .Protocol.Data.Chat.ChatMessage chat_message = 1;
    if (has_chat_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chat_message_);
    }

    // optional .Protocol.Data.Chat.ChatAcknowledge chat_acknowledge = 2;
    if (has_chat_acknowledge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chat_acknowledge_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.Chat.Packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Packet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.Chat.Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.Chat.Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.Chat.Packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_message()) {
      mutable_chat_message()->::Protocol::Data::Chat::ChatMessage::MergeFrom(from.chat_message());
    }
    if (from.has_chat_acknowledge()) {
      mutable_chat_acknowledge()->::Protocol::Data::Chat::ChatAcknowledge::MergeFrom(from.chat_acknowledge());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.Chat.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.Chat.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {

  if (has_chat_message()) {
    if (!this->chat_message_->IsInitialized()) return false;
  }
  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  std::swap(chat_message_, other->chat_message_);
  std::swap(chat_acknowledge_, other->chat_acknowledge_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Packet

// optional .Protocol.Data.Chat.ChatMessage chat_message = 1;
bool Packet::has_chat_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Packet::set_has_chat_message() {
  _has_bits_[0] |= 0x00000001u;
}
void Packet::clear_has_chat_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void Packet::clear_chat_message() {
  if (chat_message_ != NULL) chat_message_->::Protocol::Data::Chat::ChatMessage::Clear();
  clear_has_chat_message();
}
const ::Protocol::Data::Chat::ChatMessage& Packet::chat_message() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Chat.Packet.chat_message)
  return chat_message_ != NULL ? *chat_message_ : *default_instance_->chat_message_;
}
::Protocol::Data::Chat::ChatMessage* Packet::mutable_chat_message() {
  set_has_chat_message();
  if (chat_message_ == NULL) {
    chat_message_ = new ::Protocol::Data::Chat::ChatMessage;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Chat.Packet.chat_message)
  return chat_message_;
}
::Protocol::Data::Chat::ChatMessage* Packet::release_chat_message() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Chat.Packet.chat_message)
  clear_has_chat_message();
  ::Protocol::Data::Chat::ChatMessage* temp = chat_message_;
  chat_message_ = NULL;
  return temp;
}
void Packet::set_allocated_chat_message(::Protocol::Data::Chat::ChatMessage* chat_message) {
  delete chat_message_;
  chat_message_ = chat_message;
  if (chat_message) {
    set_has_chat_message();
  } else {
    clear_has_chat_message();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Chat.Packet.chat_message)
}

// optional .Protocol.Data.Chat.ChatAcknowledge chat_acknowledge = 2;
bool Packet::has_chat_acknowledge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Packet::set_has_chat_acknowledge() {
  _has_bits_[0] |= 0x00000002u;
}
void Packet::clear_has_chat_acknowledge() {
  _has_bits_[0] &= ~0x00000002u;
}
void Packet::clear_chat_acknowledge() {
  if (chat_acknowledge_ != NULL) chat_acknowledge_->::Protocol::Data::Chat::ChatAcknowledge::Clear();
  clear_has_chat_acknowledge();
}
const ::Protocol::Data::Chat::ChatAcknowledge& Packet::chat_acknowledge() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Chat.Packet.chat_acknowledge)
  return chat_acknowledge_ != NULL ? *chat_acknowledge_ : *default_instance_->chat_acknowledge_;
}
::Protocol::Data::Chat::ChatAcknowledge* Packet::mutable_chat_acknowledge() {
  set_has_chat_acknowledge();
  if (chat_acknowledge_ == NULL) {
    chat_acknowledge_ = new ::Protocol::Data::Chat::ChatAcknowledge;
  }
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Chat.Packet.chat_acknowledge)
  return chat_acknowledge_;
}
::Protocol::Data::Chat::ChatAcknowledge* Packet::release_chat_acknowledge() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Chat.Packet.chat_acknowledge)
  clear_has_chat_acknowledge();
  ::Protocol::Data::Chat::ChatAcknowledge* temp = chat_acknowledge_;
  chat_acknowledge_ = NULL;
  return temp;
}
void Packet::set_allocated_chat_acknowledge(::Protocol::Data::Chat::ChatAcknowledge* chat_acknowledge) {
  delete chat_acknowledge_;
  chat_acknowledge_ = chat_acknowledge;
  if (chat_acknowledge) {
    set_has_chat_acknowledge();
  } else {
    clear_has_chat_acknowledge();
  }
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Chat.Packet.chat_acknowledge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessage::kMessageTextFieldNumber;
const int ChatMessage::kMessageIdFieldNumber;
const int ChatMessage::kTimeDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessage::ChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.Chat.ChatMessage)
}

void ChatMessage::InitAsDefaultInstance() {
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.Chat.ChatMessage)
}

void ChatMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_ = 0u;
  time_delta_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:Protocol.Data.Chat.ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  message_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatChannel_2eproto();
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New(::google::protobuf::Arena* arena) const {
  ChatMessage* n = new ChatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.Chat.ChatMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChatMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChatMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(time_delta_, message_id_);
    if (has_message_text()) {
      message_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.Chat.ChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message_text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_text().data(), this->message_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Protocol.Data.Chat.ChatMessage.message_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_message_id;
        break;
      }

      // optional uint32 message_id = 2;
      case 2: {
        if (tag == 16) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_delta;
        break;
      }

      // optional int64 time_delta = 3;
      case 3: {
        if (tag == 24) {
         parse_time_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_delta_)));
          set_has_time_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.Chat.ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.Chat.ChatMessage)
  return false;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.Chat.ChatMessage)
  // required string message_text = 1;
  if (has_message_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_text().data(), this->message_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocol.Data.Chat.ChatMessage.message_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message_text(), output);
  }

  // optional uint32 message_id = 2;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->message_id(), output);
  }

  // optional int64 time_delta = 3;
  if (has_time_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_delta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.Chat.ChatMessage)
}

::google::protobuf::uint8* ChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.Chat.ChatMessage)
  // required string message_text = 1;
  if (has_message_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_text().data(), this->message_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocol.Data.Chat.ChatMessage.message_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_text(), target);
  }

  // optional uint32 message_id = 2;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->message_id(), target);
  }

  // optional int64 time_delta = 3;
  if (has_time_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_delta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.Chat.ChatMessage)
  return target;
}

int ChatMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.Chat.ChatMessage)
  int total_size = 0;

  // required string message_text = 1;
  if (has_message_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_text());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional uint32 message_id = 2;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

    // optional int64 time_delta = 3;
    if (has_time_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_delta());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.Chat.ChatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.Chat.ChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.Chat.ChatMessage)
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.Chat.ChatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_text()) {
      set_has_message_text();
      message_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_text_);
    }
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_time_delta()) {
      set_time_delta(from.time_delta());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.Chat.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.Chat.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessage::InternalSwap(ChatMessage* other) {
  message_text_.Swap(&other->message_text_);
  std::swap(message_id_, other->message_id_);
  std::swap(time_delta_, other->time_delta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatMessage

// required string message_text = 1;
bool ChatMessage::has_message_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatMessage::set_has_message_text() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatMessage::clear_has_message_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatMessage::clear_message_text() {
  message_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_text();
}
 const ::std::string& ChatMessage::message_text() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Chat.ChatMessage.message_text)
  return message_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_message_text(const ::std::string& value) {
  set_has_message_text();
  message_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Protocol.Data.Chat.ChatMessage.message_text)
}
 void ChatMessage::set_message_text(const char* value) {
  set_has_message_text();
  message_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Data.Chat.ChatMessage.message_text)
}
 void ChatMessage::set_message_text(const char* value, size_t size) {
  set_has_message_text();
  message_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Data.Chat.ChatMessage.message_text)
}
 ::std::string* ChatMessage::mutable_message_text() {
  set_has_message_text();
  // @@protoc_insertion_point(field_mutable:Protocol.Data.Chat.ChatMessage.message_text)
  return message_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_message_text() {
  // @@protoc_insertion_point(field_release:Protocol.Data.Chat.ChatMessage.message_text)
  clear_has_message_text();
  return message_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_message_text(::std::string* message_text) {
  if (message_text != NULL) {
    set_has_message_text();
  } else {
    clear_has_message_text();
  }
  message_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_text);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Data.Chat.ChatMessage.message_text)
}

// optional uint32 message_id = 2;
bool ChatMessage::has_message_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatMessage::set_has_message_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatMessage::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatMessage::clear_message_id() {
  message_id_ = 0u;
  clear_has_message_id();
}
 ::google::protobuf::uint32 ChatMessage::message_id() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Chat.ChatMessage.message_id)
  return message_id_;
}
 void ChatMessage::set_message_id(::google::protobuf::uint32 value) {
  set_has_message_id();
  message_id_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Chat.ChatMessage.message_id)
}

// optional int64 time_delta = 3;
bool ChatMessage::has_time_delta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatMessage::set_has_time_delta() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatMessage::clear_has_time_delta() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatMessage::clear_time_delta() {
  time_delta_ = GOOGLE_LONGLONG(0);
  clear_has_time_delta();
}
 ::google::protobuf::int64 ChatMessage::time_delta() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Chat.ChatMessage.time_delta)
  return time_delta_;
}
 void ChatMessage::set_time_delta(::google::protobuf::int64 value) {
  set_has_time_delta();
  time_delta_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Chat.ChatMessage.time_delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatAcknowledge::kMessageIdFieldNumber;
const int ChatAcknowledge::kAcceptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatAcknowledge::ChatAcknowledge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocol.Data.Chat.ChatAcknowledge)
}

void ChatAcknowledge::InitAsDefaultInstance() {
}

ChatAcknowledge::ChatAcknowledge(const ChatAcknowledge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protocol.Data.Chat.ChatAcknowledge)
}

void ChatAcknowledge::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = 0u;
  accepted_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatAcknowledge::~ChatAcknowledge() {
  // @@protoc_insertion_point(destructor:Protocol.Data.Chat.ChatAcknowledge)
  SharedDtor();
}

void ChatAcknowledge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatAcknowledge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatAcknowledge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatAcknowledge_descriptor_;
}

const ChatAcknowledge& ChatAcknowledge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatChannel_2eproto();
  return *default_instance_;
}

ChatAcknowledge* ChatAcknowledge::default_instance_ = NULL;

ChatAcknowledge* ChatAcknowledge::New(::google::protobuf::Arena* arena) const {
  ChatAcknowledge* n = new ChatAcknowledge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatAcknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Data.Chat.ChatAcknowledge)
  if (_has_bits_[0 / 32] & 3u) {
    message_id_ = 0u;
    accepted_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChatAcknowledge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocol.Data.Chat.ChatAcknowledge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 message_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accepted;
        break;
      }

      // optional bool accepted = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_accepted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepted_)));
          set_has_accepted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocol.Data.Chat.ChatAcknowledge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocol.Data.Chat.ChatAcknowledge)
  return false;
#undef DO_
}

void ChatAcknowledge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocol.Data.Chat.ChatAcknowledge)
  // optional uint32 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_id(), output);
  }

  // optional bool accepted = 2 [default = true];
  if (has_accepted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accepted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocol.Data.Chat.ChatAcknowledge)
}

::google::protobuf::uint8* ChatAcknowledge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Data.Chat.ChatAcknowledge)
  // optional uint32 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_id(), target);
  }

  // optional bool accepted = 2 [default = true];
  if (has_accepted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accepted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Data.Chat.ChatAcknowledge)
  return target;
}

int ChatAcknowledge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Data.Chat.ChatAcknowledge)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

    // optional bool accepted = 2 [default = true];
    if (has_accepted()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatAcknowledge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.Data.Chat.ChatAcknowledge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatAcknowledge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatAcknowledge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.Data.Chat.ChatAcknowledge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.Data.Chat.ChatAcknowledge)
    MergeFrom(*source);
  }
}

void ChatAcknowledge::MergeFrom(const ChatAcknowledge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Data.Chat.ChatAcknowledge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
    if (from.has_accepted()) {
      set_accepted(from.accepted());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChatAcknowledge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.Data.Chat.ChatAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatAcknowledge::CopyFrom(const ChatAcknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Data.Chat.ChatAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatAcknowledge::IsInitialized() const {

  return true;
}

void ChatAcknowledge::Swap(ChatAcknowledge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatAcknowledge::InternalSwap(ChatAcknowledge* other) {
  std::swap(message_id_, other->message_id_);
  std::swap(accepted_, other->accepted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatAcknowledge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatAcknowledge_descriptor_;
  metadata.reflection = ChatAcknowledge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatAcknowledge

// optional uint32 message_id = 1;
bool ChatAcknowledge::has_message_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatAcknowledge::set_has_message_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatAcknowledge::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatAcknowledge::clear_message_id() {
  message_id_ = 0u;
  clear_has_message_id();
}
 ::google::protobuf::uint32 ChatAcknowledge::message_id() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Chat.ChatAcknowledge.message_id)
  return message_id_;
}
 void ChatAcknowledge::set_message_id(::google::protobuf::uint32 value) {
  set_has_message_id();
  message_id_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Chat.ChatAcknowledge.message_id)
}

// optional bool accepted = 2 [default = true];
bool ChatAcknowledge::has_accepted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatAcknowledge::set_has_accepted() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatAcknowledge::clear_has_accepted() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatAcknowledge::clear_accepted() {
  accepted_ = true;
  clear_has_accepted();
}
 bool ChatAcknowledge::accepted() const {
  // @@protoc_insertion_point(field_get:Protocol.Data.Chat.ChatAcknowledge.accepted)
  return accepted_;
}
 void ChatAcknowledge::set_accepted(bool value) {
  set_has_accepted();
  accepted_ = value;
  // @@protoc_insertion_point(field_set:Protocol.Data.Chat.ChatAcknowledge.accepted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Chat
}  // namespace Data
}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
